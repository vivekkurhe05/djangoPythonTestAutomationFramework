Index: core/settings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import os\nfrom ast import literal_eval\n\nimport dj_database_url\nimport django_cache_url\n\n\nBASE_DIR = os.path.dirname(os.path.dirname(__file__))\nCONF_DIR = os.path.abspath(os.path.join(BASE_DIR, 'conf'))\n\nSECRET_KEY = os.environ.get('SECRET_KEY', 'replace_me_please')\n\nDEBUG = bool(os.environ.get('DEBUG', False))\n\nAUTH_USER_MODEL = 'users.User'\nLOGIN_REDIRECT_URL = 'home'\nLOGOUT_REDIRECT_URL = 'landing'\nLOGIN_URL = 'login'\nLOGOUT_URL = 'logout'\nINCUNA_AUTH_LOGIN_FORM = 'users.forms.SignInForm'\nINCUNA_PASSWORD_RESET_FORM = 'users.forms.PasswordResetForm'\nDUM_VALIDATE_EMAIL_SUBJECT = 'Welcome to the Global Grant Community'\n\nCSRF_COOKIE_SECURE = bool(os.environ.get('CSRF_COOKIE_SECURE', not DEBUG))\n\nALLOWED_HOSTS = [host for host in os.environ.get('ALLOWED_HOSTS', '').split(',') if host]\n\nDATABASES = {'default': dj_database_url.config(default='postgres://localhost/gfgp')}\nDATABASES['default']['ATOMIC_REQUESTS'] = True\n\nCACHES = {'default': django_cache_url.config()}\n\nEMAIL_BACKEND = os.environ.get(\n    'EMAIL_BACKEND',\n    'django.core.mail.backends.smtp.EmailBackend',\n)\nEMAIL_FILE_PATH = os.environ.get('EMAIL_FILE_PATH', 'tmp')\n\nCOMPRESS_ENABLED = bool(os.environ.get('COMPRESS_ENABLED', not DEBUG))\n\nDEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'admin@incuna.com')\nSERVER_EMAIL = os.environ.get('SERVER_EMAIL', DEFAULT_FROM_EMAIL)\nMANAGERS = ADMINS = (('Incuna error reporting', 'bugs+gfgp@incuna.com'),)\n\nEMAIL_SUBJECT_PREFIX = os.environ.get('EMAIL_SUBJECT_PREFIX', '')\nEMAIL_HOST = os.environ.get('EMAIL_HOST', 'localhost')\n\nSECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTOCOL', 'https')\nSESSION_COOKIE_SECURE = bool(os.environ.get('SESSION_COOKIE_SECURE', not DEBUG))\n\nSITE_ID = 1\n\nINSTALLED_APPS = (\n    # Core project app\n    'core',\n    'surveys',\n    'users',\n    'documents',\n    'subscriptions',\n\n    # Third party\n    'bleach',\n    'captcha',\n    'compressor',\n    'countries',\n    'crispy_forms',\n    'django_extensions',\n    'feincms',\n    'feincms.module.medialibrary',\n    'feincms.module.page',\n    'feincms_extensions',\n    'incuna_auth',\n    'mptt',\n    'raven.contrib.django.raven_compat',\n    'orderable',\n    'rest_framework',\n    'rolepermissions',\n    # 'rewrite_external_links',\n    'tinymce',\n    'user_management.ui',\n    'django_celery_results',\n\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.sites',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'django.contrib.humanize',\n\n    # `debug_toolbar` expect to be loaded after `django.contrib.staticfiles`\n    'debug_toolbar',\n)\n\nif os.environ.get('DISABLE_TOOLBAR'):\n    INTERNAL_IPS = ['']\nelse:\n    INTERNAL_IPS = ['127.0.0.1']\n\nMIGRATION_MODULES = {\n    'page': 'core.projectmigrations.page',\n    'medialibrary': 'core.projectmigrations.medialibrary',\n    'countries': 'core.projectmigrations.countries',\n}\n\nMIDDLEWARE_CLASSES = (\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.locale.LocaleMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'django.middleware.security.SecurityMiddleware',\n    # 'rewrite_external_links.middleware.RewriteExternalLinksMiddleware',\n    'debug_toolbar.middleware.DebugToolbarMiddleware',\n\n)\n\nAUTHENTICATION_BACKENDS = (\n    'django.contrib.auth.backends.ModelBackend',\n)\n\nDEFAULT_AUTHENTICATION_CLASSES = os.environ.get(\n    'DEFAULT_AUTHENTICATION_CLASSES',\n    'rest_framework.authentication.SessionAuthentication',\n).split(',')\n\nDEFAULT_RENDERER_CLASSES = os.environ.get(\n    'DEFAULT_RENDERER_CLASSES',\n    'rest_framework.renderers.JSONRenderer',\n).split(',')\n\nREST_FRAMEWORK = {\n    'DEFAULT_RENDERER_CLASSES': DEFAULT_RENDERER_CLASSES,\n    'DEFAULT_PERMISSION_CLASSES': (\n        'rest_framework.permissions.IsAuthenticated',\n    ),\n    'DEFAULT_AUTHENTICATION_CLASSES': DEFAULT_AUTHENTICATION_CLASSES,\n    'DEFAULT_PARSER_CLASSES': (\n        'rest_framework.parsers.JSONParser',\n    ),\n    'DEFAULT_THROTTLE_RATES': {\n        'logins': os.environ.get('LOGIN_RATE_LIMIT', '10/hour',),\n        'passwords': os.environ.get('PASSWORD_RATE_LIMIT', '10/hour',),\n    },\n}\nif DEBUG:\n    REST_FRAMEWORK['DEFAULT_RENDERER_CLASSES'] += (\n        'rest_framework.renderers.BrowsableAPIRenderer',\n    )\n\nROOT_URLCONF = 'core.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.media',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n                'feincms.context_processors.add_page_if_missing',\n            ],\n            'debug': bool(os.environ.get('TEMPLATE_DEBUG', DEBUG)),\n        },\n    },\n]\n\nSTATICFILES_FINDERS = (\n    'django.contrib.staticfiles.finders.FileSystemFinder',\n    'django.contrib.staticfiles.finders.AppDirectoriesFinder',\n)\n\nWSGI_APPLICATION = 'core.wsgi.application'\n\nTIME_ZONE = 'UTC'\nLANGUAGES = (('en-gb', 'English'),)\nLANGUAGE_CODE = 'en-gb'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nLOCALE_PATHS = (\n    os.path.join(BASE_DIR, 'locale'),\n)\n\nAWS_SES_ACCESS_KEY_ID = os.environ.get('AWS_SES_ACCESS_KEY_ID')\nAWS_SES_SECRET_ACCESS_KEY = os.environ.get('AWS_SES_SECRET_ACCESS_KEY')\n\nAWS_SES_REGION_NAME = os.environ.get('AWS_SES_REGION_NAME')\nAWS_SES_REGION_ENDPOINT = os.environ.get('AWS_SES_REGION_ENDPOINT')\n\n# Static / client media settings for  for `django-storages` support\nAWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')\nAWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')\nAWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_STORAGE_BUCKET_NAME')\nAWS_LOCATION = os.environ.get('AWS_LOCATION')\nDEFAULT_FILE_STORAGE = os.environ.get(\n    'DEFAULT_FILE_STORAGE',\n    'django.core.files.storage.FileSystemStorage',\n)\nSTATICFILES_STORAGE = os.environ.get(\n    'STATICFILES_STORAGE',\n    'django.contrib.staticfiles.storage.ManifestStaticFilesStorage',\n)\n\nSTATIC_ROOT_DEFAULT = os.path.join(BASE_DIR, 'static_media')\n\nSTATIC_ROOT = os.environ.get('STATIC_ROOT', STATIC_ROOT_DEFAULT)\n\nSTATIC_URL = os.environ.get('STATIC_URL', '/static/')\n\nMEDIA_ROOT_DEFAULT = os.path.join(BASE_DIR, 'client_media')\nMEDIA_ROOT = os.environ.get('MEDIA_ROOT', MEDIA_ROOT_DEFAULT)\nMEDIA_URL = os.environ.get('MEDIA_URL', '/client/')\n\nTEST_RUNNER = 'core.runner.TestRunner'\n\n# Used by frontend in development mode\nFEATURE_STYLE_GUIDE = os.environ.get('FEATURE_STYLE_GUIDE', DEBUG)\nFEATURE_MORE_INFORMATION = bool(os.environ.get('FEATURE_MORE_INFORMATION', False))\n\n# Bleach\nBLEACH_ALLOWED_TAGS = [\n    'p', 'b', 'i', 'u', 'em', 'strike', 'strong', 'a', 'ul', 'li', 'ol', 'sup',\n    'sub', 'div', 'pre', 'blockquote', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6',\n]\nBLEACH_STRIP_TAGS = True\n\n\nTINYMCE_TOOLBAR = (\n    'insertfile undo redo | styleselect | bold italic | ' +\n    'alignleft aligncenter alignright alignjustify | ' +\n    'bullist numlist outdent indent | link | media'\n)\nTINYMCE_JS_URL = '//cdn.tinymce.com/4/tinymce.min.js'\nTINYMCE_DEFAULT_CONFIG = {\n    'height': '300',\n    'plugins': 'fullscreen paste link media',\n    'paste_auto_cleanup_on_paste': True,\n    'relative_urls': False,\n    'invalid_elements': 'script',\n    'statusbar': False,\n    'menubar': False,\n    'toolbar': TINYMCE_TOOLBAR,\n}\n\nRAVEN_CONFIG = {\n    'dsn': os.environ.get('RAVEN_DSN'),\n    'environment': os.environ.get('RAVEN_ENVIRONMENT', 'localhost'),\n    'release': os.environ.get('DISTELLI_RELREVISION'),\n}\n\nCRISPY_TEMPLATE_PACK = 'bootstrap4'\nROLEPERMISSIONS_MODULE = 'core.roles'\n\nRECAPTCHA_PUBLIC_KEY = os.environ.get(\n    'RECAPTCHA_PUBLIC_KEY',\n    '6LcxVlYUAAAAAOvNcWxxdABqps_N8u4OEj3nu91T',\n)\nRECAPTCHA_PRIVATE_KEY = os.environ.get(\n    'RECAPTCHA_PRIVATE_KEY',\n    '6LcxVlYUAAAAAP6KvQiaduPeSRpFIUubQWRlSmH0',\n)\nNOCAPTCHA = True\nDISABLE_RECAPTCHA = bool(os.environ.get('DISABLE_RECAPTCHA', False))\n\n\n# Celery settings\nBROKER_URL = os.environ.get('BROKER_URL', 'amqp://guest:guest@localhost//')\nCELERY_BROKER_URL = os.environ.get('CELERY_BROKER_URL', BROKER_URL)\nCELERY_RESULT_BACKEND = os.environ.get('CELERY_RESULT_BACKEND', 'django-db')\nCELERY_ACCEPT_CONTENT = ['json']\nCELERY_TASK_SERIALIZER = 'json'\n\nBROKER_TRANSPORT_OPTIONS = {\n    # Specify region for AWS SQS\n    'region': os.environ.get('AWS_SQS_REGION_NAME', 'eu-west-1')\n}\nSQS_QUEUE_NAME = os.environ.get('SQS_QUEUE_NAME')\nif SQS_QUEUE_NAME:\n    CELERY_DEFAULT_QUEUE = SQS_QUEUE_NAME\n\nCELERY_ENABLE_REMOTE_CONTROL = bool(literal_eval(\n    os.environ.get('CELERY_ENABLE_REMOTE_CONTROL', 'True')\n))\nCELERY_SEND_EVENTS = os.environ.get('CELERY_SEND_EVENTS', 'False')\nCELERYD_SEND_EVENTS = bool(literal_eval(os.environ.get(\n    'CELERYD_SEND_EVENTS',\n    CELERY_SEND_EVENTS,\n)))\n\nCELERY_TASK_ALWAYS_EAGER = bool(os.environ.get('CELERY_TASK_ALWAYS_EAGER', DEBUG))\nCELERY_TASK_EAGER_PROPAGATES = bool(os.environ.get(\n    'CELERY_TASK_EAGER_PROPAGATES',\n    DEBUG,\n))\n\nSITE_SUBSCRIPTION = {\n    'price': 1500.00,\n    'renewal_reminder_days': 30\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- core/settings.py	(date 1532515908000)
+++ core/settings.py	(revision )
@@ -25,7 +25,8 @@
 
 ALLOWED_HOSTS = [host for host in os.environ.get('ALLOWED_HOSTS', '').split(',') if host]
 
-DATABASES = {'default': dj_database_url.config(default='postgres://localhost/gfgp')}
+DATABASES = {'default': dj_database_url.config(
+    default='postgres://pavan:psql@localhost/gfgp_pytest')}
 DATABASES['default']['ATOMIC_REQUESTS'] = True
 
 CACHES = {'default': django_cache_url.config()}
Index: surveys/tests/test_live.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import time\n\nfrom django.contrib.staticfiles.testing import StaticLiveServerTestCase\nfrom django.core.files.storage import default_storage\nfrom django.test import tag\nfrom django.utils import timezone\nfrom rolepermissions.roles import assign_role\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support import expected_conditions as EC\n\nfrom core.tests.utils import LiveTestMixin, sreenshotOnFail\nfrom documents.models import Document\nfrom documents.tests.factories import DocumentFactory\nfrom surveys.models import SurveyAnswerDocument\nfrom surveys.tests.factories import SurveyAnswerFactory, SurveyFactory, \\\n    SurveyQuestionFactory, SurveyResponseFactory, SurveySectionFactory\nfrom users.tests.factories import InvitationFactory, UserFactory\n\n\n@tag('live')\n@sreenshotOnFail()\nclass AssessmentTests(LiveTestMixin, StaticLiveServerTestCase):\n\n    def setUp(self):\n        self.user = UserFactory.create(password=self.password)\n        assign_role(self.user, 'manager')\n\n        self.survey = SurveyFactory.create()\n\n        self.section4_1 = SurveySectionFactory.create(\n            number=1,\n        )\n        self.section4_2 = SurveySectionFactory.create(\n            number=2,\n        )\n        self.section4_3 = SurveySectionFactory.create(\n            number=3,\n        )\n\n        self.q1 = SurveyQuestionFactory.create(\n            survey=self.survey,\n            level=1,\n            section=self.section4_1\n        )\n        self.q2 = SurveyQuestionFactory.create(\n            survey=self.survey,\n            level=2,\n            section=self.section4_1\n        )\n        self.q3 = SurveyQuestionFactory.create(\n            survey=self.survey,\n            level=2,\n            section=self.section4_1\n        )\n\n        self.q4 = SurveyQuestionFactory.create(\n            survey=self.survey,\n            level=3,\n            section=self.section4_2\n        )\n        self.q5 = SurveyQuestionFactory.create(\n            survey=self.survey,\n            level=4,\n            section=self.section4_3\n        )\n\n        # self.browser.get(self.live_server_url)\n\n        self.login(self.user.email, self.password)\n        self.assertIn(self.title, self.browser.title)\n\n    def tearDown(self):\n        self.logout()\n\n    def test_invite_registered_grantee_from_assessments_shared_tier_gold(self):\n        self.grantee = UserFactory.create(password=self.password)\n        self.browser.find_element_by_link_text(\"Assessments\").click()\n        self.browser.find_element_by_link_text(\"Invite grantee\").click()\n\n        self.select_drop_down_for_invitation(\"grantee\")\n\n        # select survey\n        self.select_drop_down_for_invitation(\"survey\")\n\n        # select tier\n        # 0-Bronze,1-Silver,2-Gold,3-Platinum\n        tiers = self.browser.find_elements_by_css_selector(\n            \"label[class='ui-check w-sm']\")\n        tiers[2].click()\n\n        self.set_survey_due_date(\"id_due_date\")\n\n        submit = self.browser.find_element_by_css_selector(\"button[type='submit']\")\n        submit.click()\n        alert_elem = self.browser.find_element_by_id(\"alert\")\n        success_msg = \"Invitation sent successfully\"\n        self.assertIn(alert_elem.find_element_by_class_name(\"px-2\").text, success_msg)\n\n    def test_invite_unregistered_grantee_from_assessments_shared_tier_bronze(self):\n        self.browser.find_element_by_link_text(\"Assessments\").click()\n        self.browser.find_element_by_link_text(\"Invite grantee\").click()\n\n        # invite grantee by email\n        cannot_find_link = \"Can't find the organization?\"\n        invite_org_link = self.browser.find_element_by_link_text(cannot_find_link)\n        invite_org_link.click()\n\n        new_grantee_email_field = self.browser.find_element_by_id(\"id_grantee_email\")\n        new_user_email = \"pavan.mansukhani@theredpandas.com\"\n        new_grantee_email_field.send_keys(new_user_email)\n\n        # select survey\n        self.select_drop_down_for_invitation(\"survey\")\n\n        # select tier\n        # 0-Bronze,1-Silver,2-Gold,3-Platinum\n        tiers = self.browser.find_elements_by_css_selector(\n            \"label[class='ui-check w-sm']\")\n        tiers[0].click()\n\n        self.set_survey_due_date(\"id_due_date\")\n\n        self.browser.find_element_by_css_selector(\"button[type='submit']\").click()\n        alert_elem = self.browser.find_element_by_id(\"alert\")\n        success_msg = \"Invitation sent successfully\"\n        self.assertIn(alert_elem.find_element_by_class_name(\"px-2\").text, success_msg)\n\n    def test_invite_unregistered_grantee_from_assessments_shared_tier_silver(self):\n        self.browser.find_element_by_link_text(\"Assessments\").click()\n        self.browser.find_element_by_link_text(\"Invite grantee\").click()\n\n        # invite grantee by email\n        cannot_find_link = \"Can't find the organization?\"\n        invite_org_link = self.browser.find_element_by_link_text(cannot_find_link)\n        invite_org_link.click()\n\n        new_grantee_email_field = self.browser.find_element_by_id(\"id_grantee_email\")\n        new_user_email = \"pavan.mansukhani@theredpandas.com\"\n        new_grantee_email_field.send_keys(new_user_email)\n\n        # select survey\n        self.select_drop_down_for_invitation(\"survey\")\n\n        # select tier\n        # 0-Bronze,1-Silver,2-Gold,3-Platinum\n        tiers = self.browser.find_elements_by_css_selector(\n            \"label[class='ui-check w-sm']\")\n        tiers[1].click()\n\n        self.set_survey_due_date(\"id_due_date\")\n\n        self.browser.find_element_by_css_selector(\"button[type='submit']\").click()\n        alert_elem = self.browser.find_element_by_id(\"alert\")\n        success_msg = \"Invitation sent successfully\"\n        self.assertIn(alert_elem.find_element_by_class_name(\"px-2\").text, success_msg)\n\n    def test_invite_unregistered_grantee_from_assessments_shared_tier_gold(self):\n        self.browser.find_element_by_link_text(\"Assessments\").click()\n        self.browser.find_element_by_link_text(\"Invite grantee\").click()\n\n        # invite grantee by email\n        cannot_find_link = \"Can't find the organization?\"\n        invite_org_link = self.browser.find_element_by_link_text(cannot_find_link)\n        invite_org_link.click()\n\n        new_user_email = \"pavan.mansukhani@theredpandas.com\"\n        new_grantee_email_field = self.browser_wait.until(\n            lambda browser: self.browser.find_element_by_id(\"id_grantee_email\")\n        )\n        new_grantee_email_field.send_keys(new_user_email)\n        # select survey\n        self.select_drop_down_for_invitation(\"survey\")\n\n        # select tier\n        # 0-Bronze,1-Silver,2-Gold,3-Platinum\n        tiers = self.browser.find_elements_by_css_selector(\n            \"label[class='ui-check w-sm']\")\n        tiers[2].click()\n\n        self.set_survey_due_date(\"id_due_date\")\n\n        self.browser.find_element_by_css_selector(\"button[type='submit']\").click()\n        alert_elem = self.browser.find_element_by_id(\"alert\")\n        success_msg = \"Invitation sent successfully\"\n        self.assertIn(alert_elem.find_element_by_class_name(\"px-2\").text, success_msg)\n\n    def test_start_assessment_from_dashboard_with_bronze_tier(self):\n        self.browser.find_element_by_link_text(\"Get started…\").click()\n\n        bronze_level = self.browser_wait.until(\n            lambda browser: self.browser.find_element_by_id(\"level_1\")\n        )\n        question_area = bronze_level.find_element_by_class_name(\"js-answer-value\")\n        qs1 = question_area.find_elements_by_css_selector(\"label[class='ui-check']\")\n        qs1[0].click()\n\n        # next\n        next_section = self.browser.find_element_by_link_text(\"Next\")\n        next_section.click()\n        time.sleep(0.5)\n\n        # View Summary\n        self.browser_wait.until(\n            EC.element_to_be_clickable((By.LINK_TEXT, \"View summary\"))\n        )\n        save = self.browser_wait.until(\n            lambda browser: self.browser.find_element_by_link_text(\"View summary\")\n        )\n        save.click()\n        time.sleep(0.5)\n\n        self.assertEquals(\n            self.browser_wait.until(\n                lambda browser: self.browser.find_element_by_class_name(\"badge\").text\n            ), \"Bronze\"\n        )\n        self.browser_wait.until(\n            EC.element_to_be_clickable((By.CSS_SELECTOR, \".number._700\"))\n        )\n        completion_percentage = self.browser_wait.until(\n            lambda browser: self.browser.find_element_by_css_selector(\".number._700\")\n        )\n        self.assertEquals(completion_percentage.text, \"100%\")\n\n        self.browser.find_element_by_link_text(\"Dashboard\").click()\n\n        self.assertEquals(\n            self.browser_wait.until(\n                lambda browser: self.browser.find_element_by_class_name(\n                    \"text-capitalize\").text\n            ), \"Bronze\"\n        )\n\n    def test_start_assessment_from_assessments_shared_with_bronze_tier(self):\n        self.browser.find_element_by_link_text(\"Assessments\").click()\n        self.browser.find_element_by_link_text(\"Start assessment\").click()\n\n        bronze_level = self.browser_wait.until(\n            lambda browser: self.browser.find_element_by_id(\"level_1\")\n        )\n        question_area = bronze_level.find_element_by_class_name(\"js-answer-value\")\n        qs1 = question_area.find_elements_by_css_selector(\"label[class='ui-check']\")\n        qs1[0].click()\n\n        # next\n        next_section = self.browser.find_element_by_link_text(\"Next\")\n        next_section.click()\n\n        # View Summary\n        save = self.browser.find_element_by_link_text(\"View summary\")\n        save.click()\n\n        self.assertEqual(\n            self.browser_wait.until(\n                lambda browser: self.browser.find_element_by_class_name(\n                    \"badge\").text\n            ), \"Bronze\"\n        )\n\n        completion_percentage = self.browser.find_element_by_css_selector(\".number._700\")\n        self.assertEqual(completion_percentage.text, \"100%\")\n\n        tier = self.browser.find_element_by_class_name(\"text-capitalize\")\n        self.assertEqual(tier.text, \"Bronze\")\n\n    def test_start_assessment_from_assessments_shared_with_gold_tier(self):\n        self.browser.find_element_by_link_text(\"Assessments\").click()\n        self.browser.find_element_by_link_text(\"Start assessment\").click()\n\n        next_section = self.browser.find_element_by_link_text(\"Next\")\n        next_section.click()\n\n        time.sleep(0.5)\n        change = self.browser_wait.until(\n            EC.element_to_be_clickable((By.CLASS_NAME, \"d-print-none\"))\n        )\n        change.click()\n        # ActionChains(self.browser).move_to_element(change).click().perform()\n\n        change_container = self.browser_wait.until(\n            lambda browser: self.browser.find_element_by_id(\"select2-id_level-container\")\n        )\n        change_container.click()\n        # 0-Bronze, 1-Silver, 2-Gold, 3-Platinum\n        tiers = self.browser.find_elements_by_css_selector(\"li[id^='select2-id_level']\")\n        tiers[2].click()\n\n        tier_badge = self.browser_wait.until(\n            EC.visibility_of(\n                self.browser.find_element_by_class_name(\"badge\")\n            )\n        )\n        self.assertEqual(tier_badge.text, \"Gold\")\n\n        gold_level = self.browser.find_element_by_id(\"level_3\")\n        question_area3 = gold_level.find_element_by_class_name(\"js-answer-value\")\n        qs4 = question_area3.find_elements_by_css_selector(\"label[class='ui-check']\")\n\n        qs4[2].click()\n        explanation_text = self.browser_wait.until(\n            lambda browser: self.browser.find_element_by_css_selector(\n                \"textarea[id*='explanation']\")\n        )\n        explanation_input = \"Test: Not Applicable for Gold Survey.\"\n        explanation_text.send_keys(explanation_input)\n\n        # View Summary\n        save = self.browser_wait.until(\n            lambda browser: self.browser.find_element_by_link_text(\"View summary\")\n        )\n        save.click()\n\n        tier = self.browser_wait.until(\n            lambda browser: self.browser.find_element_by_class_name(\"badge\")\n        )\n\n        self.assertEquals(tier.text, \"Gold\")\n        time.sleep(0.5)\n        completion_percentage = self.browser_wait.until(\n            EC.visibility_of(\n                self.browser.find_element_by_class_name(\"number\")\n            )\n        )\n\n        self.assertEquals(completion_percentage.text, \"25\")\n\n    def test_start_edit_assessment_from_assessments_shared_with_platinum_tier(self):\n        self.browser.find_element_by_link_text(\"Assessments\").click()\n        self.browser.find_element_by_link_text(\"Start assessment\").click()\n\n        next_section = self.browser_wait.until(\n            lambda browser: self.browser.find_element_by_link_text(\"Next\")\n        )\n        next_section.click()\n\n        time.sleep(0.5)\n        self.browser_wait.until(\n            EC.element_to_be_clickable((By.CLASS_NAME, \"d-print-none\"))\n        )\n\n        change = self.browser_wait.until(\n            lambda browser: self.browser.find_element_by_class_name(\"d-print-none\")\n        )\n        change.click()\n\n        self.browser_wait.until(\n            EC.element_to_be_clickable((By.ID, \"select2-id_level-container\"))\n        )\n        change_container = self.browser_wait.until(\n            lambda browser: browser.find_element_by_id(\"select2-id_level-container\")\n        )\n        change_container.click()\n\n        # 0-Bronze, 1-Silver, 2-Gold, 3-Platinum\n        tiers = self.browser.find_elements_by_css_selector(\"li[id^='select2-id_level']\")\n        tiers[3].click()\n\n        self.assertEqual(\n            self.browser_wait.until(\n                lambda browser: browser.find_element_by_class_name(\"badge\").text\n            ), \"Platinum\"\n        )\n\n        # View Summary\n        save = self.browser.find_element_by_link_text(\"View summary\")\n        save.click()\n\n        time.sleep(0.5)\n        edit_assessment = self.browser_wait.until(\n            lambda browser: self.browser.find_element_by_link_text(\"Edit assessment\")\n        )\n        edit_assessment.click()\n\n        self.browser_wait.until(EC.presence_of_element_located((By.ID, \"level_1\")))\n\n        bronze_level = self.browser_wait.until(\n            lambda browser: self.browser.find_element_by_id(\"level_1\")\n        )\n        question_area = self.browser_wait.until(\n            lambda browser: bronze_level.find_element_by_class_name(\"js-answer-value\")\n        )\n        qs1 = question_area.find_elements_by_css_selector(\"label[class='ui-check']\")\n        qs1[0].click()\n        time.sleep(0.5)\n\n        silver_level = self.browser_wait.until(\n            lambda browser: self.browser.find_element_by_id(\"level_2\")\n        )\n        silver_level.find_element_by_class_name(\"js-answer-value\")\n        questions_area2 = self.browser_wait.until(\n            lambda browser: silver_level.find_elements_by_class_name(\"js-answer-value\")\n        )\n        qs2 = questions_area2[0].find_elements_by_css_selector(\"label[class='ui-check']\")\n        qs3 = questions_area2[1].find_elements_by_css_selector(\"label[class='ui-check']\")\n        qs2[0].click()\n        qs3[2].click()\n        explanation_text = self.browser_wait.until(\n            lambda browser: self.browser.find_elements_by_css_selector(\n                \"textarea[id*='explanation']\")\n        )\n        explanation_text[-1].send_keys(\"Test: Not Applicable for Silver Survey.\")\n\n        # next_form\n        next_section = self.browser.find_element_by_link_text(\"Next\")\n        next_section.click()\n        time.sleep(0.5)\n\n        self.browser_wait.until(\n            EC.presence_of_element_located((By.ID, \"level_3\"))\n        )\n\n        gold_level = self.browser_wait.until(\n            lambda browser: self.browser.find_element_by_id(\"level_3\")\n        )\n        question_area3 = self.browser_wait.until(\n            lambda browser: gold_level.find_element_by_class_name(\"js-answer-value\")\n        )\n        qs4 = question_area3.find_elements_by_css_selector(\"label[class='ui-check']\")\n\n        qs4[2].click()\n        time.sleep(0.5)\n        explanation_text = self.browser_wait.until(\n            lambda browser: self.browser.find_element_by_css_selector(\n                \"textarea[id*='explanation']\")\n        )\n        explanation_text.send_keys(\"Test: Not Applicable for Gold Survey.\")\n\n        # next_form\n        next_section = self.browser.find_element_by_link_text(\"Next\")\n        next_section.click()\n        time.sleep(0.5)\n        self.browser_wait.until(\n            EC.presence_of_element_located((By.ID, \"level_4\"))\n        )\n\n        question_area4 = self.browser_wait.until(\n            lambda browser:\n            browser.find_element_by_id(\"level_4\").find_element_by_class_name(\n                \"js-answer-value\"\n            )\n        )\n        qs5 = question_area4.find_elements_by_css_selector(\"label[class='ui-check']\")\n        qs5[2].click()\n        explanation_text = self.browser.find_element_by_css_selector(\n            \"textarea[id*='explanation']\")\n        explanation_text.send_keys(\"Test: Not Applicable for Platinum Survey.\")\n\n        # View Summary\n        save = self.browser.find_element_by_link_text(\"View summary\")\n        save.click()\n        time.sleep(0.5)\n\n        tier = self.browser_wait.until(\n            lambda browser: self.browser.find_element_by_class_name(\"badge\")\n        )\n        self.assertEquals(tier.text, \"Platinum\")\n\n        self.assertEquals(\n            self.browser_wait.until(\n                lambda browser: browser.find_element_by_css_selector(\".number._700\").text\n            ), \"100%\"\n        )\n\n    def test_check_assessment_compliance_report_with_bronze_tier(self):\n        self.browser.find_element_by_link_text(\"Assessments\").click()\n        self.browser.find_element_by_link_text(\"Start assessment\").click()\n\n        bronze_level = self.browser.find_element_by_id(\"level_1\")\n        question_area = bronze_level.find_element_by_class_name(\"js-answer-value\")\n        qs1 = question_area.find_elements_by_css_selector(\"label[class='ui-check']\")\n        qs1[0].click()\n\n        # next\n        next_section = self.browser.find_element_by_link_text(\"Next\")\n        next_section.click()\n\n        # View Summary\n        save = self.browser.find_element_by_link_text(\"View summary\")\n        save.click()\n        self.browser_wait.until(EC.presence_of_element_located((By.CLASS_NAME, \"badge\")))\n\n        self.assertEqual(\n            self.browser_wait.until(\n                lambda browser: browser.find_element_by_class_name(\"badge\").text\n            ), \"Bronze\"\n        )\n        completion_percentage = self.browser.find_element_by_css_selector(\".number._700\")\n        percentage = \"100%\"\n        self.assertEqual(completion_percentage.text, \"%s\" % percentage)\n\n        compliance_elem = self.browser_wait.until(\n            lambda browser: browser.find_element_by_link_text(\"Compliance\")\n        )\n        compliance_elem.click()\n        time.sleep(0.5)\n\n        text_present = \"compliant with the Bronze tier\"\n        compliant_msg = (percentage + \" \" + text_present)\n        box_elements = self.browser_wait.until(\n            lambda browser: self.browser.find_elements_by_class_name(\"d-print-row\")\n        )\n        self.assertIn(compliant_msg, box_elements[-1].text)\n\n    def test_check_assessment_completion_report_with_bronze_tier(self):\n        self.browser.find_element_by_link_text(\"Assessments\").click()\n        self.browser.find_element_by_link_text(\"Start assessment\").click()\n\n        bronze_level = self.browser_wait.until(\n            lambda browser: self.browser.find_element_by_id(\"level_1\")\n        )\n        question_area = bronze_level.find_element_by_class_name(\"js-answer-value\")\n        qs1 = question_area.find_elements_by_css_selector(\"label[class='ui-check']\")\n        qs1[0].click()\n        time.sleep(0.5)\n\n        # View Summary\n        save = self.browser.find_element_by_link_text(\"View summary\")\n        save.click()\n        time.sleep(0.5)\n\n        self.browser_wait.until(EC.url_contains(\"progress\"))\n\n        self.assertEqual(\n            self.browser_wait.until(\n                lambda browser: browser.find_element_by_class_name(\"badge\").text\n            ), \"Bronze\"\n        )\n\n        completion_percentage = self.browser.find_element_by_css_selector(\n            \".number._700\"\n        )\n        percentage = \"100%\"\n        self.assertEqual(completion_percentage.text, \"%s\" % percentage)\n\n        completion = self.browser_wait.until(\n            lambda browser: self.browser.find_element_by_link_text(\"Completion\")\n        )\n        completion.click()\n\n        self.browser_wait.until(\n            EC.presence_of_element_located((By.CLASS_NAME, \"box-body\"))\n        )\n\n        completion_msg = (\"completed \" + percentage + \" of the Bronze tier\")\n        box_elements = self.browser.find_elements_by_class_name(\"box-body\")\n        self.assertIn(completion_msg, box_elements[1].text)\n\n    def test_attach_document_for_assessment_survey_with_bronze_tier(self):\n\n        self.q1.upload_type = 'policy'\n        self.q1.save()\n        self.document = DocumentFactory.create(\n            organisation=self.user.organisation,\n        )\n\n        self.browser.find_element_by_link_text(\"Assessments\").click()\n        self.browser.find_element_by_link_text(\"Start assessment\").click()\n\n        bronze_level = self.browser_wait.until(\n            lambda browser: self.browser.find_element_by_id(\"level_1\")\n        )\n        question_area = bronze_level.find_element_by_class_name(\"js-answer-value\")\n        qs1 = question_area.find_elements_by_css_selector(\"label[class='ui-check']\")\n        qs1[0].click()\n\n        self.browser.find_element_by_css_selector(\n            \"span[id*='attach_document']\"\n        ).click()\n\n        attach_doc = self.browser_wait.until(\n            lambda browser: browser.find_element_by_css_selector(\n                \"li[id*='attach_document-result']\"\n            )\n        )\n        attach_doc.click()\n\n        doc_explanation_text = self.browser_wait.until(\n            lambda browser: self.browser.find_element_by_css_selector(\n                \"textarea[id*='attach_explanation']\")\n        )\n        doc_explanation_input = \"Test for Survey.\"\n        doc_explanation_text.send_keys(doc_explanation_input)\n\n        attach = self.browser.find_element_by_css_selector(\n            \"button[value='attach_document']\"\n        )\n        attach.click()\n\n        self.browser_wait.until(\n            EC.visibility_of(self.browser.find_element_by_tag_name(\"button\"))\n        )\n\n        # View Summary\n        save = self.browser_wait.until(\n            lambda browser: browser.find_element_by_link_text(\"View summary\")\n        )\n        save.click()\n\n        self.browser_wait.until(EC.presence_of_element_located((By.CLASS_NAME, \"badge\")))\n\n        self.assertEqual(\n            self.browser_wait.until(\n                lambda browser: browser.find_element_by_class_name(\"badge\").text\n            ), \"Bronze\"\n        )\n        percentage = \"100%\"\n        self.browser_wait.until(\n            EC.presence_of_element_located((By.CSS_SELECTOR, \".number._700\"))\n        )\n\n        completion_percentage_text = self.browser_wait.until(\n            lambda browser: browser.find_element_by_css_selector(\".number._700\").text\n        )\n        self.assertEqual(completion_percentage_text, \"%s\" % percentage)\n\n    def test_user_cannot_submit_incomplete_assessment(self):\n        self.section_2_question = SurveyQuestionFactory.create(\n            survey=self.survey,\n            level=1,\n            section=self.section4_2\n        )\n        self.browser.find_element_by_link_text(\"Assessments\").click()\n        self.browser.find_element_by_link_text(\"Start assessment\").click()\n\n        bronze_level = self.browser_wait.until(\n            lambda browser: self.browser.find_element_by_id(\"level_1\")\n        )\n        question_area = bronze_level.find_element_by_class_name(\"js-answer-value\")\n        qs1 = question_area.find_elements_by_css_selector(\"label[class='ui-check']\")\n        qs1[0].click()\n\n        # next\n        next_section = self.browser.find_element_by_link_text(\"Next\")\n        next_section.click()\n\n        # View Summary\n        save = self.browser.find_element_by_link_text(\"View summary\")\n        save.click()\n\n        self.assertEqual(\n            self.browser_wait.until(\n                lambda browser: self.browser.find_element_by_class_name(\n                    \"badge\").text\n            ), \"Bronze\"\n        )\n\n        completion_percentage = self.browser.find_element_by_css_selector(\".number._700\")\n        self.assertEqual(completion_percentage.text, \"50%\")\n\n        submit = self.browser.find_element_by_class_name(\n            \"btn.is-sec-action.ml-1.d-print-none\"\n        )\n        self.assertFalse(submit.is_enabled())\n\n    def test_user_info_when_there_are_no_questions_left_for_section(self):\n        self.browser.find_element_by_link_text(\"Assessments\").click()\n        self.browser.find_element_by_link_text(\"Start assessment\").click()\n\n        bronze_level = self.browser_wait.until(\n            lambda browser: self.browser.find_element_by_id(\"level_1\")\n        )\n        question_area = bronze_level.find_element_by_class_name(\"js-answer-value\")\n        qs1 = question_area.find_elements_by_css_selector(\"label[class='ui-check']\")\n        qs1[0].click()\n\n        # next_section\n        next_section = self.browser.find_element_by_link_text(\"Next\")\n        next_section.click()\n\n        time.sleep(0.5)\n\n        info_msg = \"There are no bronze tier questions for this section.\"\n\n        bronze_level_section_2 = self.browser_wait.until(\n            lambda browser: browser.find_element_by_id(\"level_1\")\n        )\n\n        self.assertEqual(info_msg, bronze_level_section_2.text)\n\n    def test_inform_user_to_select_document_for_assessment_survey(self):\n        self.new_question_section = SurveyQuestionFactory.create(\n            survey=self.survey,\n            level=1,\n            section=self.section4_1,\n            upload_type='policy'\n        )\n\n        self.browser.find_element_by_link_text(\"Assessments\").click()\n        self.browser.find_element_by_link_text(\"Start assessment\").click()\n\n        bronze_level = self.browser_wait.until(\n            lambda browser: self.browser.find_element_by_id(\"level_1\")\n        )\n        question_area = bronze_level.find_element_by_class_name(\"js-answer-value\")\n        qs1 = question_area.find_elements_by_css_selector(\"label[class='ui-check']\")\n        qs1[0].click()\n\n        info_msg = \"You need to attach at least one document, \" \\\n                   \"if you do not have a document available please select in progress \" \\\n                   \"and come back to this question later\"\n\n        validation_error_field = self.browser_wait.until(\n            lambda browser: self.browser.find_element_by_class_name(\"invalid-feedback\")\n        )\n        self.assertEqual(info_msg,\n                         validation_error_field.text)\n\n    def test_submit_complete_assessment_with_bronze_tier(self):\n        self.browser.find_element_by_link_text(\"Assessments\").click()\n        self.browser.find_element_by_link_text(\"Start assessment\").click()\n\n        bronze_level = self.browser_wait.until(\n            lambda browser: self.browser.find_element_by_id(\"level_1\")\n        )\n        question_area = bronze_level.find_element_by_class_name(\"js-answer-value\")\n        qs1 = question_area.find_elements_by_css_selector(\"label[class='ui-check']\")\n        qs1[0].click()\n\n        # next\n        next_section = self.browser.find_element_by_link_text(\"Next\")\n        next_section.click()\n\n        # View Summary\n        save = self.browser.find_element_by_link_text(\"View summary\")\n        save.click()\n\n        self.assertEqual(\n            self.browser_wait.until(\n                lambda browser: self.browser.find_element_by_class_name(\n                    \"badge\").text\n            ), \"Bronze\"\n        )\n\n        completion_percentage = self.browser.find_element_by_css_selector(\".number._700\")\n        self.assertEqual(completion_percentage.text, \"100%\")\n\n        submit = self.browser.find_element_by_class_name(\n            \"btn.is-sec-action.ml-1.d-print-none\"\n        )\n        self.assertTrue(submit.is_enabled())\n        submit.click()\n\n        info_text_elem = self.browser_wait.until(\n            lambda browser: browser.find_element_by_class_name(\"highlighted-sec\")\n        )\n        submit_text = \"Submitting will make this assessment and \" \\\n                      \"all of the documents associated with it available to \" \\\n                      \"any organizations that you have shared it with \" \\\n                      \"as well as any organizations you share it with \" \\\n                      \"in the future.\"\n        self.assertEqual(info_text_elem.text, submit_text)\n\n        submit_dialog = self.browser.find_element_by_class_name(\n            \"btn.btn.is-sec-action.p-x-md\"\n        )\n        submit_dialog.click()\n        self.browser_wait.until(EC.presence_of_element_located((By.LINK_TEXT, \"Logout\")))\n\n    def test_export_completed_assessment_with_bronze_tier(self):\n        self.browser.find_element_by_link_text(\"Assessments\").click()\n        self.browser.find_element_by_link_text(\"Start assessment\").click()\n\n        bronze_level = self.browser_wait.until(\n            lambda browser: self.browser.find_element_by_id(\"level_1\")\n        )\n        question_area = bronze_level.find_element_by_class_name(\"js-answer-value\")\n        qs1 = question_area.find_elements_by_css_selector(\"label[class='ui-check']\")\n        qs1[0].click()\n\n        # next\n        next_section = self.browser.find_element_by_link_text(\"Next\")\n        next_section.click()\n\n        # View Summary\n        save = self.browser.find_element_by_link_text(\"View summary\")\n        save.click()\n\n        self.assertEqual(\n            self.browser_wait.until(\n                lambda browser: self.browser.find_element_by_class_name(\n                    \"badge\").text\n            ), \"Bronze\"\n        )\n\n        completion_percentage = self.browser.find_element_by_css_selector(\".number._700\")\n        self.assertEqual(completion_percentage.text, \"100%\")\n\n        download = self.browser.find_element_by_link_text(\"Download this assessment\")\n        self.assertTrue(download.is_enabled())\n        # download.click()\n\n    def test_verify_max_allowed_text_length_for_survey_explanation_with_bronze_tier(self):\n        self.browser.find_element_by_link_text(\"Assessments\").click()\n        self.browser.find_element_by_link_text(\"Start assessment\").click()\n\n        bronze_level = self.browser_wait.until(\n            lambda browser: self.browser.find_element_by_id(\"level_1\")\n        )\n        question_area = bronze_level.find_element_by_class_name(\"js-answer-value\")\n        qs1 = question_area.find_elements_by_css_selector(\"label[class='ui-check']\")\n        qs1[-1].click()\n        explanation_text = self.browser_wait.until(\n            lambda browser: self.browser.find_element_by_css_selector(\n                \"textarea[id*='explanation']\")\n        )\n        placeholder_text = explanation_text.get_attribute(\"placeholder\")\n        self.assertIn(\"150\", placeholder_text)\n\n    def test_fill_assessment_survey_by_upload_new_document_with_bronze_tier(self):\n        self.q1.upload_type = 'policy'\n        self.q1.save()\n\n        self.browser.find_element_by_link_text(\"Assessments\").click()\n        self.browser.find_element_by_link_text(\"Start assessment\").click()\n\n        bronze_level = self.browser_wait.until(\n            lambda browser: self.browser.find_element_by_id(\"level_1\")\n        )\n        question_area = bronze_level.find_element_by_class_name(\"js-answer-value\")\n        qs1 = question_area.find_elements_by_css_selector(\"label[class='ui-check']\")\n        qs1[0].click()\n\n        self.browser.find_element_by_link_text(\"Upload new document\").click()\n\n        upload_file_path = default_storage.path(\"test_file.txt\")\n\n        upload_file = self.browser.find_element_by_css_selector(\n            \"input[id*='upload_file']\"\n        )\n        upload_file.send_keys(upload_file_path)\n\n        upload_file_name = self.browser.find_element_by_css_selector(\n            \"input[id*='upload_name']\"\n        )\n\n        self.browser.execute_script(\"return arguments[0].scrollIntoView();\",\n                                    upload_file_name)\n\n        file_name = \"Test file\"\n        upload_file_name.send_keys(file_name)\n\n        upload_file_explanation = self.browser.find_element_by_css_selector(\n            \"textarea[id*='upload_explanation']\"\n        )\n        upload_file_explanation.send_keys(\"Upload test file for testing..\")\n\n        upload_button = self.browser.find_element_by_css_selector(\n            \"button[value='upload_document']\"\n        )\n        upload_button.click()\n\n        # View Summary\n        save = self.browser.find_element_by_link_text(\"View summary\")\n        save.click()\n\n        db_doc = SurveyAnswerDocument.objects.get()\n        self.assertEqual(db_doc.document.name, file_name)\n\n\n@tag(\"live\")\n@sreenshotOnFail()\nclass DocumentLibraryTests(LiveTestMixin, StaticLiveServerTestCase):\n\n    def setUp(self):\n        self.user = UserFactory.create(password=self.password)\n        assign_role(self.user, 'manager')\n\n        self.browser.get(self.live_server_url)\n        self.login(self.user.email, self.password)\n\n    def tearDown(self):\n        self.logout()\n\n    def test_upload_new_document_for_assessment_survey_with_bronze_tier(self):\n        self.survey = SurveyFactory.create()\n\n        self.section1_1 = SurveySectionFactory.create(\n            number=1,\n        )\n\n        self.q1 = SurveyQuestionFactory.create(\n            survey=self.survey,\n            level=1,\n            section=self.section1_1\n        )\n        self.q1.upload_type = 'policy'\n        self.q1.save()\n\n        self.browser.find_element_by_link_text(\"Assessments\").click()\n        self.browser.find_element_by_link_text(\"Start assessment\").click()\n\n        bronze_level = self.browser_wait.until(\n            lambda browser: self.browser.find_element_by_id(\"level_1\")\n        )\n        question_area = bronze_level.find_element_by_class_name(\"js-answer-value\")\n        qs1 = question_area.find_elements_by_css_selector(\"label[class='ui-check']\")\n        qs1[0].click()\n\n        self.browser.find_element_by_link_text(\"Upload new document\").click()\n\n        upload_file_path = default_storage.path(\"test_file.txt\")\n\n        upload_file = self.browser.find_element_by_css_selector(\n            \"input[id*='upload_file']\"\n        )\n        upload_file.send_keys(upload_file_path)\n\n        upload_file_name = self.browser.find_element_by_css_selector(\n            \"input[id*='upload_name']\"\n        )\n\n        self.browser.execute_script(\"return arguments[0].scrollIntoView();\",\n                                    upload_file_name)\n\n        file_name = \"Test file\"\n        upload_file_name.send_keys(file_name)\n\n        upload_file_explanation = self.browser.find_element_by_css_selector(\n            \"textarea[id*='upload_explanation']\"\n        )\n        upload_file_explanation.send_keys(\"Upload test file for testing..\")\n\n        upload_button = self.browser.find_element_by_css_selector(\n            \"button[value='upload_document']\"\n        )\n        upload_button.click()\n\n        # View Summary\n        save = self.browser.find_element_by_link_text(\"View summary\")\n        save.click()\n\n        db_doc = SurveyAnswerDocument.objects.get()\n        self.assertEqual(db_doc.document.name, file_name)\n\n    def test_attach_document_from_previously_saved_in_library(self):\n        self.survey = SurveyFactory.create()\n\n        self.section1_1 = SurveySectionFactory.create(\n            number=1,\n        )\n\n        self.q1 = SurveyQuestionFactory.create(\n            survey=self.survey,\n            level=1,\n            section=self.section1_1\n        )\n\n        self.q1.upload_type = 'policy'\n        self.q1.save()\n        library_document_name = \"library_document\"\n        self.document = DocumentFactory.create(\n            name=library_document_name,\n            organisation=self.user.organisation,\n        )\n\n        self.browser.find_element_by_link_text(\"Assessments\").click()\n        self.browser.find_element_by_link_text(\"Start assessment\").click()\n\n        bronze_level = self.browser_wait.until(\n            lambda browser: self.browser.find_element_by_id(\"level_1\")\n        )\n        question_area = bronze_level.find_element_by_class_name(\"js-answer-value\")\n        qs1 = question_area.find_elements_by_css_selector(\"label[class='ui-check']\")\n        qs1[0].click()\n\n        self.browser.find_element_by_css_selector(\n            \"span[id*='attach_document']\"\n        ).click()\n\n        attach_doc = self.browser_wait.until(\n            lambda browser: browser.find_element_by_css_selector(\n                \"li[id*='attach_document-result']\"\n            )\n        )\n        attach_doc.click()\n\n        doc_explanation_text = self.browser_wait.until(\n            lambda browser: self.browser.find_element_by_css_selector(\n                \"textarea[id*='attach_explanation']\")\n        )\n        doc_explanation_input = \"Test for Survey.\"\n        doc_explanation_text.send_keys(doc_explanation_input)\n\n        attach = self.browser.find_element_by_css_selector(\n            \"button[value='attach_document']\"\n        )\n        attach.click()\n\n        self.browser_wait.until(\n            EC.visibility_of(self.browser.find_element_by_tag_name(\"button\"))\n        )\n\n        # View Summary\n        save = self.browser.find_element_by_link_text(\"View summary\")\n        save.click()\n\n        db_survey = SurveyAnswerDocument.objects.get()\n        self.assertEqual(db_survey.document.name, library_document_name)\n\n    def test_uploading_a_document_in_library(self):\n        self.browser.find_element_by_link_text(\"Document library\").click()\n        file_name = \"Test file\"\n        upload_file_path = default_storage.path(\"test_file.txt\")\n\n        document_name = self.browser.find_element_by_id(\"id_name\")\n        document_name.send_keys(file_name)\n\n        document_expiry = self.browser.find_element_by_id(\"id_expiry\")\n        document_expiry.send_keys(self.get_next_date())\n\n        upload_file = self.browser.find_element_by_id(\"id_file\")\n        upload_file.send_keys(upload_file_path)\n\n        self.browser.find_element_by_id(\"submit\").click()\n\n        success_msg = \"Document uploaded successfully\"\n        alert = self.browser.find_element_by_id(\"alert\")\n        self.assertEqual(alert.text, success_msg)\n\n        db_doc = Document.objects.get()\n        self.assertEqual(db_doc.name, file_name)\n        self.assertEqual(db_doc.file.read(), b'This is sample text')\n\n    def test_user_can_download_the_uploaded_a_document_in_library(self):\n        self.browser.find_element_by_link_text(\"Document library\").click()\n        file_name = \"Test file\"\n        uploaded_file = \"test_file.txt\"\n        upload_file_path = default_storage.path(uploaded_file)\n\n        document_name = self.browser.find_element_by_id(\"id_name\")\n        document_name.send_keys(file_name)\n\n        document_expiry = self.browser.find_element_by_id(\"id_expiry\")\n        document_expiry.send_keys(self.get_next_date())\n\n        upload_file = self.browser.find_element_by_id(\"id_file\")\n        upload_file.send_keys(upload_file_path)\n\n        self.browser.find_element_by_id(\"submit\").click()\n\n        success_msg = \"Document uploaded successfully\"\n        alert = self.browser.find_element_by_id(\"alert\")\n        self.assertEqual(alert.text, success_msg)\n\n        self.browser.find_element_by_class_name(\"btn.white\").click()\n        self.assertTrue(EC.url_contains(uploaded_file))\n\n        self.browser.back()\n        self.browser.get(self.live_server_url)\n\n    def test_user_can_edit_the_name_of_uploaded_in_library(self):\n        self.browser.find_element_by_link_text(\"Document library\").click()\n        file_name = \"Test file\"\n        upload_file_path = default_storage.path(\"test_file.txt\")\n\n        document_name = self.browser.find_element_by_id(\"id_name\")\n        document_name.send_keys(file_name)\n\n        document_expiry = self.browser.find_element_by_id(\"id_expiry\")\n        document_expiry.send_keys(self.get_next_date())\n\n        upload_file = self.browser.find_element_by_id(\"id_file\")\n        upload_file.send_keys(upload_file_path)\n\n        self.browser.find_element_by_id(\"submit\").click()\n\n        success_msg = \"Document uploaded successfully\"\n        alert = self.browser.find_element_by_id(\"alert\")\n        self.assertEqual(alert.text, success_msg)\n\n        self.browser.find_elements_by_class_name(\"btn.white\")[-1].click()\n\n        self.browser_wait.until(EC.url_contains(\"edit\"))\n        time.sleep(0.5)\n\n        new_file_name = \"New test file name\"\n        edit_document_name = self.browser_wait.until(\n            lambda browser: browser.find_element_by_id(\"id_name\")\n        )\n        edit_document_name.clear()\n        edit_document_name.send_keys(new_file_name)\n\n        self.browser_wait.until(\n            EC.element_to_be_clickable((By.CSS_SELECTOR, \"button[type='submit']\"))\n        )\n\n        submit = self.browser_wait.until(\n            lambda browser: browser.find_element_by_css_selector(\"button[type='submit']\")\n        )\n        submit.click()\n        success_msg = \"Document updated successfully\"\n\n        alert = self.browser_wait.until(\n            lambda browser: browser.find_element_by_id(\"alert\")\n        )\n        self.assertEqual(alert.text, success_msg)\n\n        db_doc = Document.objects.get()\n        self.assertEqual(db_doc.name, new_file_name)\n        self.assertEqual(db_doc.file.read(), b'This is sample text')\n\n\n@tag(\"live\")\nclass ReportsTests(LiveTestMixin, StaticLiveServerTestCase):\n    def setUp(self):\n        self.browser.get(self.live_server_url)\n\n    def tearDown(self):\n        self.logout()\n\n    def test_view_submitted_assessment_report_by_grantee(self):\n        self.grantee = UserFactory.create(password=self.password)\n        assign_role(self.grantee, \"admin\")\n        assign_role(self.user, \"admin\")\n\n        self.survey = SurveyFactory.create()\n\n        self.survey_response = SurveyResponseFactory.create(\n            organisation=self.grantee.organisation,\n            survey=self.survey,\n            level=1,\n            submitted=timezone.now()\n        )\n        self.section = SurveySectionFactory.create(\n            number=1,\n        )\n        self.question = SurveyQuestionFactory.create(\n            survey=self.survey,\n            level=1,\n            section=self.section\n        )\n        self.answer = SurveyAnswerFactory.create(\n            response=self.survey_response,\n            question=self.question\n        )\n        self.invitation = InvitationFactory.create(\n            survey=self.survey,\n            grantee=self.survey_response.organisation,\n            status=3,\n            accepted=True,\n            grantor=self.user.organisation\n        )\n\n        self.login(self.user.email, self.password)\n\n        self.browser.find_element_by_link_text(\"Invitations\").click()\n        self.assertTrue(EC.presence_of_element_located((By.LINK_TEXT, \"View\")))\n        view_submitted_survey = self.browser.find_element_by_link_text(\"View\")\n        view_submitted_survey.click()\n        time.sleep(0.5)\n\n        self.assertTrue(\n            self.browser_wait.until(\n                lambda browser:\n                browser.find_element_by_link_text(\"Print report\").is_enabled()\n            )\n        )\n        completion_percentage = self.browser_wait.until(\n            lambda browser: self.browser.find_element_by_css_selector(\".number._700\")\n        )\n        report_header = self.browser.find_element_by_tag_name(\"h2\").text\n        self.assertEquals(completion_percentage.text, \"100%\")\n        self.assertIn(\"Full report\", report_header)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- surveys/tests/test_live.py	(date 1532515908000)
+++ surveys/tests/test_live.py	(revision )
@@ -1,3 +1,4 @@
+import pdb
 import time
 
 from django.contrib.staticfiles.testing import StaticLiveServerTestCase
@@ -11,6 +12,9 @@
 from core.tests.utils import LiveTestMixin, sreenshotOnFail
 from documents.models import Document
 from documents.tests.factories import DocumentFactory
+from subscriptions.models import Order
+from subscriptions.tests.factories import OrderFactory, SubscriptionFactory, AssessmentPackageFactory, \
+    AssessmentPurchaseFactory
 from surveys.models import SurveyAnswerDocument
 from surveys.tests.factories import SurveyAnswerFactory, SurveyFactory, \
     SurveyQuestionFactory, SurveyResponseFactory, SurveySectionFactory
@@ -65,6 +69,24 @@
         )
 
         # self.browser.get(self.live_server_url)
+        self.grantor_org = self.user.organisation
+        order = OrderFactory.create(
+            organisation=self.grantor_org,
+            status=Order.STATUS_APPROVED
+        )
+
+        SubscriptionFactory.create(order=order)
+        package = AssessmentPackageFactory.create(
+            number_included=1,
+            price=900.00
+        )
+        AssessmentPurchaseFactory.create(
+            package=package,
+            order=order,
+            order__organisation=self.grantor_org,
+            order__status=Order.STATUS_APPROVED,
+            number_included=10,
+        )
 
         self.login(self.user.email, self.password)
         self.assertIn(self.title, self.browser.title)
@@ -242,13 +264,14 @@
         qs1 = question_area.find_elements_by_css_selector("label[class='ui-check']")
         qs1[0].click()
 
-        # next
-        next_section = self.browser.find_element_by_link_text("Next")
-        next_section.click()
+        # # next
+        # next_section = self.browser.find_element_by_link_text("Next")
+        # next_section.click()
 
         # View Summary
         save = self.browser.find_element_by_link_text("View summary")
         save.click()
+        time.sleep(0.5)
 
         self.assertEqual(
             self.browser_wait.until(
@@ -471,12 +494,13 @@
         qs1[0].click()
 
         # next
-        next_section = self.browser.find_element_by_link_text("Next")
-        next_section.click()
+        # next_section = self.browser.find_element_by_link_text("Next")
+        # next_section.click()
 
         # View Summary
         save = self.browser.find_element_by_link_text("View summary")
         save.click()
+        time.sleep(0.5)
         self.browser_wait.until(EC.presence_of_element_located((By.CLASS_NAME, "badge")))
 
         self.assertEqual(
@@ -563,9 +587,8 @@
         qs1 = question_area.find_elements_by_css_selector("label[class='ui-check']")
         qs1[0].click()
 
-        self.browser.find_element_by_css_selector(
-            "span[id*='attach_document']"
-        ).click()
+        time.sleep(0.5)
+        self.browser.find_element_by_css_selector("span[id*='attach_document']").click()
 
         attach_doc = self.browser_wait.until(
             lambda browser: browser.find_element_by_css_selector(
@@ -595,6 +618,7 @@
             lambda browser: browser.find_element_by_link_text("View summary")
         )
         save.click()
+        time.sleep(0.5)
 
         self.browser_wait.until(EC.presence_of_element_located((By.CLASS_NAME, "badge")))
 
@@ -629,13 +653,14 @@
         qs1 = question_area.find_elements_by_css_selector("label[class='ui-check']")
         qs1[0].click()
 
-        # next
-        next_section = self.browser.find_element_by_link_text("Next")
-        next_section.click()
+        # # next
+        # next_section = self.browser.find_element_by_link_text("Next")
+        # next_section.click()
 
         # View Summary
         save = self.browser.find_element_by_link_text("View summary")
         save.click()
+        time.sleep(0.5)
 
         self.assertEqual(
             self.browser_wait.until(
@@ -716,13 +741,14 @@
         qs1 = question_area.find_elements_by_css_selector("label[class='ui-check']")
         qs1[0].click()
 
-        # next
-        next_section = self.browser.find_element_by_link_text("Next")
-        next_section.click()
+        # # next
+        # next_section = self.browser.find_element_by_link_text("Next")
+        # next_section.click()
 
         # View Summary
         save = self.browser.find_element_by_link_text("View summary")
         save.click()
+        time.sleep(0.5)
 
         self.assertEqual(
             self.browser_wait.until(
@@ -767,13 +793,14 @@
         qs1 = question_area.find_elements_by_css_selector("label[class='ui-check']")
         qs1[0].click()
 
-        # next
-        next_section = self.browser.find_element_by_link_text("Next")
-        next_section.click()
-
+        # # next
+        # next_section = self.browser.find_element_by_link_text("Next")
+        # next_section.click()
+        #
         # View Summary
         save = self.browser.find_element_by_link_text("View summary")
         save.click()
+        time.sleep(0.5)
 
         self.assertEqual(
             self.browser_wait.until(
@@ -1141,6 +1168,25 @@
             grantor=self.user.organisation
         )
 
+        grantor_org = self.user.organisation
+        order = OrderFactory.create(
+            organisation=grantor_org,
+            status=Order.STATUS_APPROVED
+        )
+
+        subscription = SubscriptionFactory.create(order=order)
+        package = AssessmentPackageFactory.create(
+            number_included=1,
+            price=900.00
+        )
+        AssessmentPurchaseFactory.create(
+            package=package,
+            order=order,
+            order__organisation=grantor_org,
+            order__status=Order.STATUS_APPROVED,
+            number_included=1,
+        )
+
         self.login(self.user.email, self.password)
 
         self.browser.find_element_by_link_text("Invitations").click()
Index: users/tests/test_live.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import time\n\nfrom django.contrib.staticfiles.testing import StaticLiveServerTestCase\nfrom django.core import signing\nfrom django.test import tag\nfrom rolepermissions.roles import assign_role, clear_roles\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support import expected_conditions as EC\nfrom selenium.webdriver.support.select import Select\n\nfrom core.tests.utils import LiveTestMixin, sreenshotOnFail\nfrom surveys.tests.factories import SurveyFactory, \\\n    SurveyQuestionFactory, SurveySectionFactory\nfrom users.models import Invitation, User\nfrom .factories import UserFactory\n\n\n@tag('live')\n@sreenshotOnFail()\nclass LoginTests(LiveTestMixin, StaticLiveServerTestCase):\n\n    def setUp(self):\n        self.browser.get(self.live_server_url)\n\n    def test_login_as_registered_user(self):\n        self.user = UserFactory.create(password=self.password)\n        assign_role(self.user, 'admin')\n        self.login(self.user.email, self.password)\n\n        page_title = self.browser_wait.until(\n            lambda browser: browser.find_element_by_id(\"pageTitle\")\n        )\n        self.assertEqual(\"Dashboard\", page_title.text)\n        self.assertIn(\"home\", self.browser.current_url)\n\n        logout = self.browser.find_element_by_link_text(\"Logout\")\n        logout.click()\n        self.assertEqual(self.live_server_url + '/', self.browser.current_url)\n\n    def test_login_as_unregistered_user(self):\n        self.login(\"randomusername\", \"randompassword\")\n        expected_message = \"Please enter a correct Email address and password. \" \\\n                           \"Note that both fields may be case-sensitive.\"\n        self.assertIn(\"login\", self.browser.current_url)\n        error_text = self.browser.find_element_by_id(\"error_notification\").text\n        self.assertEqual(expected_message, error_text)\n\n    def test_login_as_registered_user_with_incorrect_password(self):\n        self.login(self.user.email, \"randompassword\")\n        expected_message = \"Please enter a correct Email address and password. \" \\\n                           \"Note that both fields may be case-sensitive.\"\n        self.assertIn(\"login\", self.browser.current_url)\n        error_text = self.browser.find_element_by_id(\"error_notification\").text\n        self.assertEqual(expected_message, error_text)\n\n    def test_forgot_password_for_organisation(self):\n        self.user = UserFactory.create(password=self.password)\n        login_link = self.browser_wait.until(\n            lambda browser: self.browser.find_elements_by_link_text(\"Login\")[1]\n        )\n        self.browser.execute_script(\"return arguments[0].scrollIntoView();\", login_link)\n        login_link.click()\n\n        self.browser_wait.until(\n            EC.url_contains(\"login\")\n        )\n        self.browser.find_element_by_link_text(\"Forgot password?\").click()\n        self.assertIn(\"password/reset\", self.browser.current_url)\n\n        enter_email = self.browser_wait.until(\n            lambda browser: self.browser.find_element_by_id(\"id_email\")\n        )\n        enter_email.send_keys(self.user.email)\n\n        self.browser_wait.until(\n            EC.element_to_be_clickable((By.CSS_SELECTOR, \"button[type='submit']\"))\n        )\n\n        submit_button = self.browser_wait.until(\n            lambda browser: self.browser.find_element_by_css_selector(\n                \"button[type='submit']\")\n        )\n        submit_button.click()\n\n        success_text = self.browser_wait.until(\n            lambda browser: self.browser.find_element_by_tag_name(\"h5\").text\n        )\n        self.assertEqual(success_text, \"Instructions sent successfully\")\n\n\n@tag('live')\nclass RegisterTests(LiveTestMixin, StaticLiveServerTestCase):\n    fixtures = [\n        'organisationtypes.json',\n        'default_countries.json',\n    ]\n\n    def setUp(self):\n        self.user = UserFactory.create(password=self.password)\n        self.browser.get(self.live_server_url)\n        self.data = {'name': 'Pavan',\n                     'emailAddress': 'pavan.mansukhani@theredpandas.com',\n                     'password': 'admin',\n                     'mobile': '8879237340',\n                     'location': 'Mumbai',\n                     'role': 'dev',\n                     'legalName': 'Red Panda',\n                     'optionalName': 'The RedPanda',\n                     'parentOrg': 'RedPanda',\n                     'iatiUid': '123456789',\n                     'regNumber': '123456',\n                     'orgIdentifier': 'redpanda',\n                     'address1': '6th floor, Cerebrum',\n                     'address2': 'Kalyani Nagar',\n                     'city': 'Pune',\n                     'province': 'Pune',\n                     'country': 'India',\n                     'postalCode': '400007',\n                     'poBox': '112233',\n                     'offPhone': '1231231234',\n                     'landmark': 'Near D-Mart',\n                     'website': 'https://theredpandas.com',\n                     'socialMedia': 'https://theredpandas.com',\n                     'otherSocialMedia': 'https://theredpandas.com'}\n\n    def test_register_as_an_organization(self):\n        self.assertIn(self.title, self.browser.title)\n\n        register_link = self.browser.find_element_by_link_text(\"Register\")\n\n        self.browser.execute_script(\n            \"return arguments[0].scrollIntoView();\", register_link\n        )\n        register_link = self.browser_wait.until(\n            lambda browser: self.browser.find_element_by_link_text(\"Register\")\n        )\n        register_link.click()\n\n        self.browser_wait.until(EC.url_contains(\"register\"))\n        self.assertIn(\"register\", self.browser.current_url)\n\n        data = self.data\n        self.fill_register_form(data, \"pavan@theredpandas.com\", data.get(\"legalName\"))\n\n        submit_button = self.browser_wait.until(\n            lambda browser: self.browser.find_element_by_css_selector(\n                \"input[type='submit']\")\n        )\n        submit_button.click()\n\n        alert_elem = self.browser.find_element_by_class_name(\"heading\")\n\n        self.assertEquals(\n            alert_elem.text,\n            \"Thank you for signing up\"\n        )\n\n        self.browser_wait.until(\n            EC.presence_of_element_located((By.LINK_TEXT, \"Login here\"))\n        )\n        login_here = self.browser_wait.until(\n            lambda browser: self.browser.find_element_by_link_text(\"Login here\")\n        )\n        login_here.click()\n        self.browser_wait.until(EC.url_contains(\"login\"))\n\n        self.assertIn(\"login\", self.browser.current_url)\n\n    def test_register_organization_full_flow_with_login(self):\n        self.assertIn(self.title, self.browser.title)\n\n        register_link = self.browser.find_element_by_link_text(\"Register\")\n        self.browser.execute_script(\n            \"return arguments[0].scrollIntoView();\", register_link\n        )\n        register_link.click()\n\n        self.browser_wait.until(EC.url_contains(\"register\"))\n        self.assertIn(\"register\", self.browser.current_url)\n        data = self.data\n        user_email_address = data.get(\"emailAddress\")\n        user_password = data.get(\"password\")\n\n        self.fill_register_form(data, data.get(\"emailAddress\"), data.get(\"legalName\"))\n\n        submit_button = self.browser_wait.until(\n            lambda browser: self.browser.find_element_by_css_selector(\n                \"input[type='submit']\")\n        )\n        submit_button.click()\n\n        alert_elem = self.browser.find_element_by_class_name(\"heading\")\n\n        self.assertEquals(\n            alert_elem.text,\n            \"Thank you for signing up\"\n        )\n\n        self.browser_wait.until(\n            EC.presence_of_element_located((By.LINK_TEXT, \"Login here\"))\n        )\n        login_here = self.browser_wait.until(\n            lambda browser: self.browser.find_element_by_link_text(\"Login here\")\n        )\n        login_here.click()\n        self.browser_wait.until(EC.url_matches(\"login\"))\n\n        self.assertIn(\"login\", self.browser.current_url)\n\n        # validate email address\n        db_user = User.objects.get(email=user_email_address)\n        db_user.is_active = True\n        db_user.save()\n\n        self.login(user_email_address, user_password)\n        self.logout()\n        self.browser.get(self.live_server_url)\n\n    def test_register_organization_with_already_registered_user(self):\n        self.assertIn(self.title, self.browser.title)\n        db_user = self.user\n\n        register_link = self.browser.find_element_by_link_text(\"Register\")\n        self.browser.execute_script(\n            \"return arguments[0].scrollIntoView();\", register_link\n        )\n        register_link.click()\n\n        self.browser_wait.until(EC.url_contains(\"register\"))\n        self.assertIn(\"register\", self.browser.current_url)\n        data = self.data\n        self.fill_register_form(data, db_user.email, data.get(\"legalName\"))\n\n        submit_button = self.browser_wait.until(\n            lambda browser: self.browser.find_element_by_css_selector(\n                \"input[type='submit']\")\n        )\n        submit_button.click()\n\n        alert_element = self.browser.find_element_by_id(\"alert\")\n        alert = alert_element.find_element_by_class_name(\"px-2\")\n\n        self.assertEquals(alert.text, \"Registration Failed, please correct the form\")\n        error_text = self.browser.find_element_by_id(\"error_1_id_email\").text\n\n        self.assertEquals(error_text, \"User with this Email address already exists.\")\n\n    def test_register_organization_with_already_registered_organisation(self):\n        self.assertIn(self.title, self.browser.title)\n        db_user = self.user\n        org = db_user.organisation\n\n        register_link = self.browser.find_element_by_link_text(\"Register\")\n        self.browser.execute_script(\n            \"return arguments[0].scrollIntoView();\", register_link\n        )\n        register_link.click()\n\n        self.browser_wait.until(EC.url_contains(\"register\"))\n\n        self.assertIn(\"register\", self.browser.current_url)\n        data = self.data\n\n        self.fill_register_form(data, data.get(\"emailAddress\"), org.legal_name)\n\n        submit_button = self.browser_wait.until(\n            lambda browser: self.browser.find_element_by_css_selector(\n                \"input[type='submit']\")\n        )\n        submit_button.click()\n\n        alert_element = self.browser.find_element_by_id(\"alert\")\n        alert = alert_element.find_element_by_class_name(\"px-2\")\n\n        self.assertEquals(alert.text, \"Registration Failed, please correct the form\")\n        error_text = self.browser.find_element_by_id(\"error_1_id_legal_name\").text\n        self.assertEquals(error_text,\n                          \"Organisation with this Organization / \"\n                          \"Legal entity already exists.\")\n\n\n@tag('live')\nclass InvitationTests(LiveTestMixin, StaticLiveServerTestCase):\n    fixtures = [\n        'organisationtypes.json',\n        'default_countries.json',\n    ]\n\n    def setUp(self):\n        self.user = UserFactory.create(password=self.password)\n        assign_role(self.user, 'admin')\n\n        self.grantee_user = UserFactory.create(password=self.password)\n        assign_role(self.grantee_user, 'manager')\n\n        self.survey = SurveyFactory.create()\n\n        self.section4_1 = SurveySectionFactory.create(\n            number=1,\n        )\n        self.section4_2 = SurveySectionFactory.create(\n            number=2,\n        )\n        self.section4_3 = SurveySectionFactory.create(\n            number=3,\n        )\n\n        self.q1 = SurveyQuestionFactory.create(\n            survey=self.survey,\n            level=1,\n            section=self.section4_1\n        )\n        self.q2 = SurveyQuestionFactory.create(\n            survey=self.survey,\n            level=2,\n            section=self.section4_1\n        )\n        self.q3 = SurveyQuestionFactory.create(\n            survey=self.survey,\n            level=3,\n            section=self.section4_2\n        )\n        self.q4 = SurveyQuestionFactory.create(\n            survey=self.survey,\n            level=4,\n            section=self.section4_3\n        )\n\n        self.data = {'name': 'Pavan',\n                     'emailAddress': 'pavan.mansukhani@theredpandas.com',\n                     'password': 'admin',\n                     'mobile': '8879237340',\n                     'location': 'Mumbai',\n                     'role': 'dev',\n                     'legalName': 'Red Panda',\n                     'optionalName': 'The RedPanda',\n                     'parentOrg': 'RedPanda',\n                     'iatiUid': '123456789',\n                     'regNumber': '123456',\n                     'orgIdentifier': 'redpanda',\n                     'address1': '6th floor, Cerebrum',\n                     'address2': 'Kalyani Nagar',\n                     'city': 'Pune',\n                     'province': 'Pune',\n                     'country': 'India',\n                     'postalCode': '400007',\n                     'poBox': '112233',\n                     'offPhone': '1231231234',\n                     'landmark': 'Near D-Mart',\n                     'website': 'https://theredpandas.com',\n                     'socialMedia': 'https://theredpandas.com',\n                     'otherSocialMedia': 'https://theredpandas.com'}\n\n        self.browser.get(self.live_server_url)\n\n    def test_invite_registered_organisation_for_bronze_survey(self):\n        self.login(self.user.email, self.password)\n        self.assertIn(self.title, self.browser.title)\n\n        self.browser.find_element_by_link_text(\"Invitations\").click()\n        self.browser.find_element_by_link_text(\"New invitation\").click()\n\n        # select from list\n        self.select_drop_down_for_invitation(\"grantee\")\n\n        # select survey\n        self.select_drop_down_for_invitation(\"survey\")\n\n        # select tier\n        # 0-Bronze,1-Silver,2-Gold,3-Platinum\n        tiers = self.browser.find_elements_by_css_selector(\n            \"label[class='ui-check w-sm']\")\n        tiers[0].click()\n\n        submit = self.browser.find_element_by_css_selector(\"button[type='submit']\")\n        submit.click()\n\n        alert_elem = self.browser.find_element_by_id(\"alert\")\n        success_msg = \"Invitation sent successfully\"\n        self.assertIn(alert_elem.find_element_by_class_name(\"px-2\").text, success_msg)\n        self.logout()\n\n    def test_invite_registered_organisation_for_silver_survey(self):\n        self.login(self.user.email, self.password)\n        self.assertIn(self.title, self.browser.title)\n\n        self.browser.find_element_by_link_text(\"Invitations\").click()\n        self.browser.find_element_by_link_text(\"New invitation\").click()\n\n        # select from list\n        self.select_drop_down_for_invitation(\"grantee\")\n\n        # select survey\n        self.select_drop_down_for_invitation(\"survey\")\n\n        # select tier\n        # 0-Bronze,1-Silver,2-Gold,3-Platinum\n        tiers = self.browser.find_elements_by_css_selector(\n            \"label[class='ui-check w-sm']\")\n        tiers[1].click()\n\n        self.browser.find_element_by_css_selector(\"button[type='submit']\").click()\n\n        alert_elem = self.browser.find_element_by_id(\"alert\")\n        success_msg = \"Invitation sent successfully\"\n        self.assertIn(alert_elem.find_element_by_class_name(\"px-2\").text, success_msg)\n        self.logout()\n\n    def test_invite_registered_organisation_for_gold_survey(self):\n        self.login(self.user.email, self.password)\n        self.assertIn(self.title, self.browser.title)\n\n        self.browser.find_element_by_link_text(\"Invitations\").click()\n        self.browser.find_element_by_link_text(\"New invitation\").click()\n\n        # select from list\n        self.select_drop_down_for_invitation(\"grantee\")\n\n        # select survey\n        self.select_drop_down_for_invitation(\"survey\")\n\n        # select tier\n        # 0-Bronze,1-Silver,2-Gold,3-Platinum\n        tiers = self.browser.find_elements_by_css_selector(\n            \"label[class='ui-check w-sm']\")\n        tiers[2].click()\n\n        self.browser.find_element_by_css_selector(\"button[type='submit']\").click()\n\n        alert_elem = self.browser.find_element_by_id(\"alert\")\n        success_msg = \"Invitation sent successfully\"\n        self.assertIn(alert_elem.find_element_by_class_name(\"px-2\").text, success_msg)\n        self.logout()\n\n    def test_invite_registered_organisation_for_platinum_survey(self):\n        self.login(self.user.email, self.password)\n        self.assertIn(self.title, self.browser.title)\n\n        self.browser.find_element_by_link_text(\"Invitations\").click()\n        self.browser.find_element_by_link_text(\"New invitation\").click()\n\n        # select from list\n        self.select_drop_down_for_invitation(\"grantee\")\n\n        # select survey\n        self.select_drop_down_for_invitation(\"survey\")\n\n        # select tier\n        # 0-Bronze,1-Silver,2-Gold,3-Platinum\n        tiers = self.browser.find_elements_by_css_selector(\n            \"label[class='ui-check w-sm']\")\n        tiers[3].click()\n\n        self.browser.find_element_by_css_selector(\"button[type='submit']\").click()\n\n        alert_elem = self.browser.find_element_by_id(\"alert\")\n        success_msg = \"Invitation sent successfully\"\n        self.assertIn(alert_elem.find_element_by_class_name(\"px-2\").text, success_msg)\n        self.logout()\n\n    def test_re_invite_registered_organisation_for_silver_survey(self):\n        self.login(self.user.email, self.password)\n        self.assertIn(self.title, self.browser.title)\n\n        self.browser.find_element_by_link_text(\"Invitations\").click()\n        self.browser.find_element_by_link_text(\"New invitation\").click()\n\n        # select from list\n        self.select_drop_down_for_invitation(\"grantee\")\n\n        # select survey\n        self.select_drop_down_for_invitation(\"survey\")\n\n        # select tier\n        # 0-Bronze,1-Silver,2-Gold,3-Platinum\n        tiers = self.browser.find_elements_by_css_selector(\n            \"label[class='ui-check w-sm']\")\n        tiers[1].click()\n\n        self.browser.find_element_by_css_selector(\"button[type='submit']\").click()\n        alert_elem = self.browser.find_element_by_id(\"alert\")\n        success_msg = \"Invitation sent successfully\"\n        self.assertIn(alert_elem.find_element_by_class_name(\"px-2\").text, success_msg)\n\n        resend_btn = self.browser.find_element_by_css_selector(\"button.btn\")\n        resend_btn.click()\n\n        resend_success_msg = \"Your invite has been resent\"\n        alert_elem = self.browser.find_element_by_id(\"alert\")\n        self.assertIn(alert_elem.find_element_by_class_name(\"px-2\").text,\n                      resend_success_msg)\n        self.logout()\n\n    def test_invite_and_accept_registered_organisation_for_gold_survey(self):\n        self.login(self.user.email, self.password)\n        self.assertIn(self.title, self.browser.title)\n\n        self.browser.find_element_by_link_text(\"Invitations\").click()\n        self.browser.find_element_by_link_text(\"New invitation\").click()\n\n        # select from list\n        self.select_drop_down_for_invitation(\"grantee\")\n\n        # select survey\n        self.select_drop_down_for_invitation(\"survey\")\n\n        # select tier\n        # 0-Bronze,1-Silver,2-Gold,3-Platinum\n        tiers = self.browser.find_elements_by_css_selector(\n            \"label[class='ui-check w-sm']\")\n        tiers[2].click()\n        #\n        self.browser_wait.until(\n            EC.presence_of_element_located((By.CSS_SELECTOR, \"button[type='submit']\"))\n        )\n        submit = self.browser_wait.until(\n            lambda browser: self.browser.find_element_by_css_selector(\n                \"button[type='submit']\")\n        )\n        submit.click()\n        alert_elem = self.browser.find_element_by_id(\"alert\")\n        success_msg = \"Invitation sent successfully\"\n        self.assertIn(alert_elem.find_element_by_class_name(\"px-2\").text, success_msg)\n        self.logout()\n        self.login(self.grantee_user.email, self.password)\n\n        survey_tier = self.browser.find_element_by_class_name(\"badge.bg-level-3\")\n        self.assertEquals(survey_tier.text, \"Gold\")\n        accept = self.browser_wait.until(\n            lambda browser: browser.find_element_by_class_name(\"accept-invite-btn\")\n        )\n        accept.click()\n\n        self.browser_wait.until(\n            lambda browser: EC.new_window_is_opened(browser.current_window_handle)\n        )\n\n        self.browser.switch_to.window(self.browser.window_handles[0])\n        confirm = self.browser_wait.until(\n            lambda browser: browser.find_element_by_css_selector(\n                \"button[type='submit']\")\n        )\n        confirm.click()\n\n        alert_elem = self.browser.find_element_by_id(\"alert\")\n        self.assertEquals(alert_elem.text, \"Successfully accepted the invitation\")\n\n    def test_invite_new_user_for_bronze_survey(self):\n        self.login(self.user.email, self.password)\n        self.assertIn(self.title, self.browser.title)\n\n        self.browser.find_element_by_link_text(\"Invitations\").click()\n        self.browser.find_element_by_link_text(\"New invitation\").click()\n\n        # invite grantee by email\n        cannot_find_link = \"Can't find the organization?\"\n        invite_org_link = self.browser.find_element_by_link_text(cannot_find_link)\n        invite_org_link.click()\n\n        new_grantee_email_field = self.browser.find_element_by_id(\"id_grantee_email\")\n        new_user_email = self.data.get(\"emailAddress\")\n        new_grantee_email_field.send_keys(new_user_email)\n\n        # select survey\n        self.select_drop_down_for_invitation(\"survey\")\n\n        # select tier\n        # 0-Bronze,1-Silver,2-Gold,3-Platinum\n        tiers = self.browser.find_elements_by_css_selector(\n            \"label[class='ui-check w-sm']\")\n        tiers[0].click()\n\n        self.set_survey_due_date(\"id_due_date\")\n\n        submit = self.browser.find_element_by_css_selector(\"button[type='submit']\")\n        submit.click()\n        alert_elem = self.browser.find_element_by_id(\"alert\")\n        success_msg = \"Invitation sent successfully\"\n        self.assertIn(alert_elem.find_element_by_class_name(\"px-2\").text, success_msg)\n        self.logout()\n\n        # Register the new user with the invite link\n        invitation = Invitation.objects.get(grantee_email=new_user_email,\n                                            grantee=None, accepted=False)\n        token = signing.dumps(invitation.id)\n\n        self.browser.get(self.live_server_url + \"/register/?token=\" + token)\n\n        self.fill_register_form(self.data, new_user_email, self.data.get(\"legalName\"))\n\n        submit_button = self.browser_wait.until(\n            lambda browser: self.browser.find_element_by_css_selector(\n                \"input[type='submit']\")\n        )\n        submit_button.click()\n\n        alert_element = self.browser.find_element_by_id(\"alert\")\n        self.assertEquals(alert_element.text, \"Thanks for signing up. Please login\")\n\n        self.login(new_user_email, self.data.get(\"password\"))\n        self.assertEquals(\"1\", self.browser.find_element_by_class_name(\"badge\").text)\n\n    def test_user_cannot_re_send_invitation_to_organisation_for_same_survey(self):\n        self.login(self.user.email, self.password)\n        self.assertIn(self.title, self.browser.title)\n\n        self.browser.find_element_by_link_text(\"Invitations\").click()\n        self.browser.find_element_by_link_text(\"New invitation\").click()\n\n        # select from list\n        self.select_drop_down_for_invitation(\"grantee\")\n\n        # select survey\n        self.select_drop_down_for_invitation(\"survey\")\n\n        # select tier\n        # 0-Bronze,1-Silver,2-Gold,3-Platinum\n        tiers = self.browser.find_elements_by_css_selector(\n            \"label[class='ui-check w-sm']\")\n        tiers[0].click()\n\n        self.set_survey_due_date(\"id_due_date\")\n\n        self.browser.find_element_by_css_selector(\"button[type='submit']\").click()\n        alert_elem = self.browser.find_element_by_id(\"alert\")\n        success_msg = \"Invitation sent successfully\"\n        self.assertIn(alert_elem.find_element_by_class_name(\"px-2\").text, success_msg)\n\n        self.browser.find_element_by_link_text(\"New invitation\").click()\n\n        # select from list\n        self.select_drop_down_for_invitation(\"grantee\")\n\n        # select survey\n        self.select_drop_down_for_invitation(\"survey\")\n\n        # select tier\n        # 0-Bronze,1-Silver,2-Gold,3-Platinum\n        tiers = self.browser.find_elements_by_css_selector(\n            \"label[class='ui-check w-sm']\")\n        tiers[0].click()\n        self.browser.find_element_by_css_selector(\"button[type='submit']\").click()\n\n        alert_elem = self.browser.find_element_by_id(\"alert\")\n        self.assertIn(alert_elem.find_element_by_class_name(\"px-2\").text,\n                      \"Invitation failed, please correct the form\")\n\n        error_msg = self.browser.find_element_by_id(\"error_1_id_grantee\").text\n        self.assertIn(\n            \"An invitation already exists for the organization \"\n            \"with the given assessment\", error_msg\n        )\n        self.logout()\n\n    def test_user_cannot_send_invitation_to_its_own_organisation_email_address(self):\n        user_email_address = self.user.email\n        self.login(user_email_address, self.password)\n        self.assertIn(self.title, self.browser.title)\n\n        self.browser.find_element_by_link_text(\"Invitations\").click()\n        self.browser.find_element_by_link_text(\"New invitation\").click()\n\n        # invite grantee by email\n        cannot_find_link = \"Can't find the organization?\"\n        invite_org_link = self.browser.find_element_by_link_text(cannot_find_link)\n        invite_org_link.click()\n\n        new_grantee_email_field = self.browser.find_element_by_id(\"id_grantee_email\")\n\n        new_grantee_email_field.send_keys(user_email_address)\n\n        # select survey\n        self.select_drop_down_for_invitation(\"survey\")\n\n        # select tier\n        # 0-Bronze,1-Silver,2-Gold,3-Platinum\n        tiers = self.browser.find_elements_by_css_selector(\n            \"label[class='ui-check w-sm']\")\n        tiers[0].click()\n\n        self.set_survey_due_date(\"id_due_date\")\n\n        self.browser.find_element_by_css_selector(\"button[type='submit']\").click()\n\n        alert_elem = self.browser.find_element_by_id(\"alert\")\n        self.assertIn(alert_elem.find_element_by_class_name(\"px-2\").text,\n                      \"Invitation failed, please correct the form\")\n\n        error_msg = self.browser_wait.until(\n            lambda browser: self.browser.find_element_by_id(\n                \"error_1_id_grantee_email\"\n            ).text\n        )\n        self.assertIn(\n            \"Email already registered, please select their organisation\", error_msg\n        )\n        self.logout()\n\n    def test_user_cannot_search_own_organisation_name_for_sending_invitation(self):\n        user = self.user\n        legal_name = user.organisation.legal_name\n        self.login(user.email, self.password)\n        self.assertIn(self.title, self.browser.title)\n\n        self.browser.find_element_by_link_text(\"Invitations\").click()\n        self.browser.find_element_by_link_text(\"New invitation\").click()\n\n        # check if legal_name exists in grantee drop down\n        select_grantee = Select(self.browser.find_element_by_tag_name(\"select\"))\n\n        for grantee_option in select_grantee.options:\n            self.assertNotIn(legal_name, grantee_option.text)\n\n        self.logout()\n\n    def test_user_with_role_user_cannot_send_invitation(self):\n        user = UserFactory.create(password=self.password)\n\n        clear_roles(user)\n        assign_role(user, \"user\")\n\n        self.login(user.email, self.password)\n        self.assertIn(self.title, self.browser.title)\n\n        self.assertNotIn(\"Invitations\",\n                         self.browser.find_element_by_id(\"sidenav-list\").text)\n\n        self.logout()\n\n    def test_user_with_role_user_cannot_accept_invitation(self):\n        admin_user = self.user\n        assign_role(admin_user, \"admin\")\n\n        user = UserFactory.create(password=self.password)\n        clear_roles(user)\n        assign_role(user, \"user\")\n\n        self.login(admin_user.email, self.password)\n        self.assertIn(self.title, self.browser.title)\n\n        self.browser.find_element_by_link_text(\"Invitations\").click()\n        self.browser.find_element_by_link_text(\"New invitation\").click()\n\n        # select from list\n        self.select_drop_down_for_invitation(\"grantee\")\n\n        # select survey\n        self.select_drop_down_for_invitation(\"survey\")\n\n        # select tier\n        # 0-Bronze,1-Silver,2-Gold,3-Platinum\n        tiers = self.browser.find_elements_by_css_selector(\n            \"label[class='ui-check w-sm']\")\n        tiers[0].click()\n\n        self.set_survey_due_date(\"id_due_date\")\n\n        self.browser.find_element_by_css_selector(\"button[type='submit']\").click()\n        self.logout()\n\n        self.login(user.email, self.password)\n        self.assertNotIn(\"Accept\",\n                         self.browser.find_elements_by_class_name(\"box-body\")[1].text)\n\n        self.assertNotIn(\"Invitations\",\n                         self.browser.find_element_by_id(\"sidenav-list\").text)\n\n        self.logout()\n\n\n@tag('live')\nclass DashboardTests(LiveTestMixin, StaticLiveServerTestCase):\n\n    def setUp(self):\n        self.user = UserFactory.create(password=self.password)\n        self.browser.get(self.live_server_url)\n\n    def tearDown(self):\n        self.logout()\n\n    def test_as_a_user_role_cannot_view_menu_items_from_dashboard(self):\n        assign_role(self.user, 'user')\n        self.login(self.user.email, self.password)\n\n        page_title = self.browser_wait.until(\n            lambda browser: browser.find_element_by_id(\"pageTitle\")\n        )\n        self.assertEqual(\"Dashboard\", page_title.text)\n        self.assertIn(\"home\", self.browser.current_url)\n\n        user_menu = self.browser.find_element_by_id(\"sidenav-list\").text\n\n        self.assertNotIn(\"Invitations\", user_menu)\n\n    def test_as_a_manager_role_cannot_view_menu_items_from_dashboard(self):\n        assign_role(self.user, 'manager')\n        self.login(self.user.email, self.password)\n\n        page_title = self.browser_wait.until(\n            lambda browser: browser.find_element_by_id(\"pageTitle\")\n        )\n        self.assertEqual(\"Dashboard\", page_title.text)\n        self.assertIn(\"home\", self.browser.current_url)\n\n        manager_menu = self.browser.find_element_by_id(\"sidenav-list\").text\n\n        self.assertIn(\"Invitations\", manager_menu)\n        self.assertNotIn(\"Organization & users\", manager_menu)\n\n\n@tag('live')\nclass ProfileTests(LiveTestMixin, StaticLiveServerTestCase):\n\n    def setUp(self):\n        self.user = UserFactory.create(password=self.password)\n        assign_role(self.user, \"user\")\n        self.browser.get(self.live_server_url)\n        self.login(self.user.email, self.password)\n\n        self.updated_user_name = \"Test User..\"\n        self.updated_job_role = \"Testing..\"\n        self.updated_mobile = \"1234567890\"\n        self.updated_email = \"test@theredpandas.com\"\n\n    def tearDown(self):\n        self.logout()\n\n    def test_as_a_user_i_can_edit_profile_details(self):\n        self.assertIn(\"home\", self.browser.current_url)\n\n        self.browser.find_element_by_link_text(\"My profile\").click()\n        page_title = self.browser_wait.until(\n            lambda browser: browser.find_element_by_id(\"pageTitle\")\n        )\n        self.assertEqual(\"My profile\", page_title.text)\n\n        user_name = self.browser.find_element_by_id(\"id_name\")\n        user_name.clear()\n        user_name.send_keys(self.updated_user_name)\n\n        job_role = self.browser.find_element_by_id(\"id_job_role\")\n        job_role.clear()\n        job_role.send_keys(self.updated_job_role)\n\n        user_mobile = self.browser.find_element_by_id(\"id_user_mobile\")\n        user_mobile.clear()\n        user_mobile.send_keys(self.updated_mobile)\n\n        submit = self.browser.find_element_by_css_selector(\"button[type='submit']\")\n        submit.click()\n\n        db_user = User.objects.get(email=self.user.email)\n\n        self.assertEqual(db_user.name, self.updated_user_name)\n        self.assertEqual(db_user.job_role, self.updated_job_role)\n        self.assertEqual(db_user.user_mobile, self.updated_mobile)\n\n    def test_as_a_user_i_can_update_my_email_address(self):\n        self.assertIn(\"home\", self.browser.current_url)\n\n        self.browser.find_element_by_link_text(\"My profile\").click()\n        page_title = self.browser_wait.until(\n            lambda browser: browser.find_element_by_id(\"pageTitle\")\n        )\n        self.assertEqual(\"My profile\", page_title.text)\n\n        user_id = self.user.id\n\n        user_name = self.browser.find_element_by_id(\"id_name\")\n        user_name.clear()\n        user_name.send_keys(self.updated_user_name)\n\n        user_email = self.browser.find_element_by_id(\"id_email\")\n        user_email.clear()\n        user_email.send_keys(self.updated_email)\n\n        job_role = self.browser.find_element_by_id(\"id_job_role\")\n        job_role.clear()\n        job_role.send_keys(self.updated_job_role)\n\n        user_mobile = self.browser.find_element_by_id(\"id_user_mobile\")\n        user_mobile.clear()\n        user_mobile.send_keys(self.updated_mobile)\n\n        submit = self.browser.find_element_by_css_selector(\"button[type='submit']\")\n        submit.click()\n\n        db_user = User.objects.get(id=user_id)\n\n        self.assertEqual(db_user.name, self.updated_user_name)\n        self.assertEqual(db_user.job_role, self.updated_job_role)\n        self.assertEqual(db_user.user_mobile, self.updated_mobile)\n        self.assertEqual(db_user.email, self.updated_email)\n\n    def test_prompt_user_when_update_email_with_already_registered_email_address(self):\n        updated_email = \"pavan@theredpandas.com\"\n        UserFactory.create(email=\"pavan@theredpandas.com\", password=self.password)\n\n        self.assertIn(\"home\", self.browser.current_url)\n\n        self.browser.find_element_by_link_text(\"My profile\").click()\n        page_title = self.browser_wait.until(\n            lambda browser: browser.find_element_by_id(\"pageTitle\")\n        )\n        self.assertEqual(\"My profile\", page_title.text)\n\n        user_name = self.browser.find_element_by_id(\"id_name\")\n        user_name.clear()\n        user_name.send_keys(self.updated_user_name)\n\n        user_email = self.browser.find_element_by_id(\"id_email\")\n        user_email.clear()\n        user_email.send_keys(updated_email)\n\n        job_role = self.browser.find_element_by_id(\"id_job_role\")\n        job_role.clear()\n        job_role.send_keys(self.updated_job_role)\n\n        submit = self.browser.find_element_by_css_selector(\"button[type='submit']\")\n        submit.click()\n\n        submit_alert_text = \"Edit profile failed, please correct the form\"\n\n        alert = self.browser.find_element_by_id(\"alert\")\n        self.assertEqual(alert.text, submit_alert_text)\n\n        email_error = self.browser.find_element_by_id(\"error_1_id_email\")\n\n        validation_text = \"User with this Email address already exists.\"\n        self.assertEqual(email_error.text, validation_text)\n\n    def test_as_a_user_i_can_change_my_password(self):\n        self.assertIn(\"home\", self.browser.current_url)\n\n        self.browser.find_element_by_link_text(\"My profile\").click()\n        page_title = self.browser_wait.until(\n            lambda browser: browser.find_element_by_id(\"pageTitle\")\n        )\n        self.assertEqual(\"My profile\", page_title.text)\n\n        change_password = self.browser.find_element_by_link_text(\"Change password\")\n        change_password.click()\n\n        old_pass_field = self.browser_wait.until(\n            lambda browser: browser.find_element_by_id(\"id_old_password\")\n        )\n        old_pass_field.send_keys(self.password)\n\n        new_pass_field = self.browser.find_element_by_id(\"id_new_password1\")\n        new_pass_field.send_keys(\"newpassword\")\n\n        new_confirm_pass_field = self.browser.find_element_by_id(\"id_new_password2\")\n        new_confirm_pass_field.send_keys(\"newpassword\")\n\n        submit = self.browser.find_element_by_css_selector(\"input[type='submit']\")\n        submit.click()\n\n        success_pass_change = \"Password has been updated successfully\"\n\n        alert = self.browser.find_element_by_id(\"alert\")\n        self.assertEqual(alert.text, success_pass_change)\n\n    def test_as_a_user_i_have_to_input_my_correct_old_pass_for_change_password(self):\n        self.assertIn(\"home\", self.browser.current_url)\n\n        self.browser.find_element_by_link_text(\"My profile\").click()\n        page_title = self.browser_wait.until(\n            lambda browser: browser.find_element_by_id(\"pageTitle\")\n        )\n        self.assertEqual(\"My profile\", page_title.text)\n\n        change_password = self.browser.find_element_by_link_text(\"Change password\")\n        change_password.click()\n\n        old_pass_field = self.browser_wait.until(\n            lambda browser: browser.find_element_by_id(\"id_old_password\")\n        )\n        old_pass_field.send_keys(\"anypassword\")\n\n        new_pass_field = self.browser.find_element_by_id(\"id_new_password1\")\n        new_pass_field.send_keys(\"newpassword\")\n\n        new_confirm_pass_field = self.browser.find_element_by_id(\"id_new_password2\")\n        new_confirm_pass_field.send_keys(\"newpassword\")\n\n        submit = self.browser.find_element_by_css_selector(\"input[type='submit']\")\n        submit.click()\n\n        error_change_pass_form = \"Please correct the form errors\"\n\n        alert = self.browser.find_element_by_id(\"alert\")\n        self.assertEqual(alert.text, error_change_pass_form)\n\n        old_pass_error = \"Your old password was entered incorrectly. \" \\\n                         \"Please enter it again.\"\n\n        error_info_field = self.browser.find_element_by_id(\"error_1_id_old_password\")\n        self.assertEqual(error_info_field.text, old_pass_error)\n\n\n@tag('live')\nclass OrganisationUsersTests(LiveTestMixin, StaticLiveServerTestCase):\n    fixtures = [\n        'organisationtypes.json',\n        'default_countries.json',\n    ]\n\n    def setUp(self):\n        self.user = UserFactory.create(password=self.password)\n        assign_role(self.user, \"admin\")\n        self.browser.get(self.live_server_url)\n        self.login(self.user.email, self.password)\n\n    def tearDown(self):\n        self.logout()\n\n    def test_add_user_for_organisation_with_manager_role(self):\n        self.new_user_data = {'name': 'Pavan',\n                              'emailAddress': 'pavan.mansukhani@theredpandas.com',\n                              'mobile': '8879237340',\n                              'role': 'dev'}\n\n        self.browser.find_element_by_link_text(\"Organization & users\").click()\n        self.browser.find_element_by_link_text(\"Add user\").click()\n\n        name_field = self.browser.find_element_by_id(\"id_name\")\n        name_field.send_keys(self.new_user_data['name'])\n\n        email_field = self.browser.find_element_by_id(\"id_email\")\n        email_field.send_keys(self.new_user_data['emailAddress'])\n\n        mobile_field = self.browser.find_element_by_id(\"id_user_mobile\")\n        mobile_field.send_keys(self.new_user_data['mobile'])\n\n        role_field = self.browser.find_element_by_id(\"id_job_role\")\n        role_field.send_keys(self.new_user_data['role'])\n\n        select_user_container = self.browser.find_element_by_id(\n            \"select2-id_user_type-container\"\n        )\n        select_user_container.click()\n        select_manager = self.browser.find_element_by_css_selector(\"li[id*='manager']\")\n        select_manager.click()\n\n        self.browser.find_element_by_css_selector(\"button[type='submit']\").click()\n\n        alert_text = self.browser.find_element_by_id(\"alert\").text\n        success_msg = \"User added successfully\"\n\n        self.assertEqual(alert_text, success_msg)\n\n    def test_edit_organisation_details_as_admin(self):\n        legal_name = \"New legal name\"\n        new_address = \"Cerebrum IT park\"\n        new_city = \"Pune\"\n        self.browser.find_element_by_link_text(\"Organization & users\").click()\n        self.browser.find_element_by_link_text(\"Edit\").click()\n\n        legal_name_field = self.browser.find_element_by_id(\"id_legal_name\")\n        legal_name_field.clear()\n        legal_name_field.send_keys(legal_name)\n\n        address_field = self.browser.find_element_by_id(\"id_address_1\")\n        address_field.clear()\n        address_field.send_keys(new_address)\n\n        city_field = self.browser.find_element_by_id(\"id_city\")\n        city_field.clear()\n        city_field.send_keys(new_city)\n\n        self.select_drop_down_element_multiple(\"id_types\", \"Other\")\n        self.select_drop_down_element(\"id_country\", \"id_country\", 5)\n\n        save = self.browser.find_elements_by_tag_name(\"button\")[-1]\n        save.click()\n\n        alert_text = self.browser.find_element_by_id(\"alert\").text\n        success_msg = \"Organization updated successfully\"\n\n        self.assertEqual(alert_text, success_msg)\n        db_user = User.objects.get(id=self.user.id)\n        db_org = db_user.organisation\n\n        self.assertEqual(db_org.legal_name, legal_name)\n        self.assertEqual(db_org.address_1, new_address)\n        self.assertEqual(db_org.city, new_city)\n\n    def test_add_already_registered_email_address_as_new_user(self):\n        self.new_user_data = {'name': 'Pavan',\n                              'emailAddress': 'pavan.mansukhani@theredpandas.com',\n                              'mobile': '8879237340',\n                              'role': 'dev'}\n        UserFactory.create(email=self.new_user_data['emailAddress'],\n                           password=self.password)\n\n        self.browser.find_element_by_link_text(\"Organization & users\").click()\n        self.browser.find_element_by_link_text(\"Add user\").click()\n\n        name_field = self.browser.find_element_by_id(\"id_name\")\n        name_field.send_keys(self.new_user_data['name'])\n\n        email_field = self.browser.find_element_by_id(\"id_email\")\n        email_field.send_keys(self.new_user_data['emailAddress'])\n\n        mobile_field = self.browser.find_element_by_id(\"id_user_mobile\")\n        mobile_field.send_keys(self.new_user_data['mobile'])\n\n        role_field = self.browser.find_element_by_id(\"id_job_role\")\n        role_field.send_keys(self.new_user_data['role'])\n\n        select_user_container = self.browser.find_element_by_id(\n            \"select2-id_user_type-container\"\n        )\n        select_user_container.click()\n        select_manager = self.browser.find_element_by_css_selector(\"li[id*='manager']\")\n        select_manager.click()\n\n        self.browser.find_element_by_css_selector(\"button[type='submit']\").click()\n\n        alert_text = self.browser.find_element_by_id(\"alert\").text\n\n        error_msg = \"Add user failed, please correct the form\"\n        self.assertEqual(alert_text, error_msg)\n\n        error_text = \"User with this Email address already exists.\"\n        email_error_text = self.browser.find_element_by_id(\"error_1_id_email\").text\n        self.assertEqual(error_text, email_error_text)\n\n    def test_modify_user_details_for_organisation_as_an_admin(self):\n        new_name = \"new user name\"\n        new_mobile_number = \"1234567890\"\n        new_role = \"test\"\n\n        self.new_user = UserFactory.create(email=\"abcd@abcd.com\",\n                                           password=self.password,\n                                           organisation=self.user.organisation)\n        assign_role(self.new_user, \"user\")\n\n        self.browser.find_element_by_link_text(\"Organization & users\").click()\n        self.browser.find_elements_by_link_text(\"Edit\")[-1].click()\n\n        name_field = self.browser.find_element_by_id(\"id_name\")\n        name_field.clear()\n        name_field.send_keys(new_name)\n\n        role_field = self.browser.find_element_by_id(\"id_job_role\")\n        role_field.send_keys(new_role)\n\n        mobile_field = self.browser.find_element_by_id(\"id_user_mobile\")\n        mobile_field.clear()\n        mobile_field.send_keys(new_mobile_number)\n\n        self.browser.find_element_by_css_selector(\"button[type='submit']\").click()\n\n        alert_text = self.browser_wait.until(\n            lambda browser: browser.find_element_by_id(\"alert\").text\n        )\n        success_msg = \"User updated successfully\"\n\n        self.assertEqual(alert_text, success_msg)\n\n        db_new_user = User.objects.get(id=self.new_user.id)\n\n        self.assertEqual(db_new_user.name, new_name)\n        self.assertEqual(db_new_user.user_mobile, new_mobile_number)\n\n    def test_delete_user_details_for_organisation_as_an_admin(self):\n        self.new_user = UserFactory.create(email=\"abcd@abcd.com\",\n                                           password=self.password,\n                                           organisation=self.user.organisation)\n        assign_role(self.new_user, \"user\")\n\n        self.browser.find_element_by_link_text(\"Organization & users\").click()\n        self.browser.find_elements_by_link_text(\"Edit\")[-1].click()\n\n        self.browser.find_element_by_css_selector(\"button[type='button']\").click()\n\n        self.browser_wait.until(\n            lambda browser: EC.new_window_is_opened(browser.current_window_handle)\n        )\n\n        self.browser.switch_to.window(self.browser.window_handles[0])\n\n        self.browser_wait.until(\n            EC.element_to_be_clickable((By.CSS_SELECTOR, \"button[type='submit']\"))\n        )\n        submit = self.browser_wait.until(\n            lambda browser: browser.find_elements_by_css_selector(\n                \"button[type='submit']\"\n            )[-1]\n        )\n        time.sleep(0.5)\n        submit.click()\n\n        self.browser.switch_to_default_content()\n\n        alert_text = self.browser_wait.until(\n            lambda browser: browser.find_element_by_id(\"alert\").text\n        )\n        success_msg = \"User successfully deleted\"\n\n        self.assertEqual(alert_text, success_msg)\n\n\n@tag(\"live\")\nclass LandingPageTests(LiveTestMixin, StaticLiveServerTestCase):\n\n    def setUp(self):\n        self.browser.get(self.live_server_url)\n\n    def test_user_can_access_static_pages_without_login(self):\n\n        about_us = self.browser.find_element_by_class_name(\"btn.banner-btn-aboutus\")\n        about_us.click()\n        self.assertIn(\"aboutus\", self.browser.current_url)\n\n        self.browser.find_element_by_link_text(\"Privacy Policy\").click()\n        self.assertIn(\"privacy\", self.browser.current_url)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- users/tests/test_live.py	(date 1532515908000)
+++ users/tests/test_live.py	(revision )
@@ -1,3 +1,4 @@
+import pdb
 import time
 
 from django.contrib.staticfiles.testing import StaticLiveServerTestCase
@@ -9,6 +10,9 @@
 from selenium.webdriver.support.select import Select
 
 from core.tests.utils import LiveTestMixin, sreenshotOnFail
+from subscriptions.models import Order
+from subscriptions.tests.factories import OrderFactory, SubscriptionFactory, AssessmentPackageFactory, \
+    AssessmentPurchaseFactory
 from surveys.tests.factories import SurveyFactory, \
     SurveyQuestionFactory, SurveySectionFactory
 from users.models import Invitation, User
@@ -326,6 +330,25 @@
             section=self.section4_3
         )
 
+        self.grantor_org = self.user.organisation
+        order = OrderFactory.create(
+            organisation=self.grantor_org,
+            status=Order.STATUS_APPROVED
+        )
+
+        SubscriptionFactory.create(order=order)
+        package = AssessmentPackageFactory.create(
+            number_included=1,
+            price=900.00
+        )
+        AssessmentPurchaseFactory.create(
+            package=package,
+            order=order,
+            order__organisation=self.grantor_org,
+            order__status=Order.STATUS_APPROVED,
+            number_included=10,
+        )
+
         self.data = {'name': 'Pavan',
                      'emailAddress': 'pavan.mansukhani@theredpandas.com',
                      'password': 'admin',
@@ -358,7 +381,7 @@
         self.assertIn(self.title, self.browser.title)
 
         self.browser.find_element_by_link_text("Invitations").click()
-        self.browser.find_element_by_link_text("New invitation").click()
+        self.browser.find_element_by_link_text("Make invitation").click()
 
         # select from list
         self.select_drop_down_for_invitation("grantee")
@@ -385,7 +408,7 @@
         self.assertIn(self.title, self.browser.title)
 
         self.browser.find_element_by_link_text("Invitations").click()
-        self.browser.find_element_by_link_text("New invitation").click()
+        self.browser.find_element_by_link_text("Make invitation").click()
 
         # select from list
         self.select_drop_down_for_invitation("grantee")
@@ -411,7 +434,7 @@
         self.assertIn(self.title, self.browser.title)
 
         self.browser.find_element_by_link_text("Invitations").click()
-        self.browser.find_element_by_link_text("New invitation").click()
+        self.browser.find_element_by_link_text("Make invitation").click()
 
         # select from list
         self.select_drop_down_for_invitation("grantee")
@@ -437,7 +460,7 @@
         self.assertIn(self.title, self.browser.title)
 
         self.browser.find_element_by_link_text("Invitations").click()
-        self.browser.find_element_by_link_text("New invitation").click()
+        self.browser.find_element_by_link_text("Make invitation").click()
 
         # select from list
         self.select_drop_down_for_invitation("grantee")
@@ -463,7 +486,7 @@
         self.assertIn(self.title, self.browser.title)
 
         self.browser.find_element_by_link_text("Invitations").click()
-        self.browser.find_element_by_link_text("New invitation").click()
+        self.browser.find_element_by_link_text("Make invitation").click()
 
         # select from list
         self.select_drop_down_for_invitation("grantee")
@@ -496,7 +519,7 @@
         self.assertIn(self.title, self.browser.title)
 
         self.browser.find_element_by_link_text("Invitations").click()
-        self.browser.find_element_by_link_text("New invitation").click()
+        self.browser.find_element_by_link_text("Make invitation").click()
 
         # select from list
         self.select_drop_down_for_invitation("grantee")
@@ -550,7 +573,7 @@
         self.assertIn(self.title, self.browser.title)
 
         self.browser.find_element_by_link_text("Invitations").click()
-        self.browser.find_element_by_link_text("New invitation").click()
+        self.browser.find_element_by_link_text("Make invitation").click()
 
         # invite grantee by email
         cannot_find_link = "Can't find the organization?"
@@ -605,7 +628,7 @@
         self.assertIn(self.title, self.browser.title)
 
         self.browser.find_element_by_link_text("Invitations").click()
-        self.browser.find_element_by_link_text("New invitation").click()
+        self.browser.find_element_by_link_text("Make invitation").click()
 
         # select from list
         self.select_drop_down_for_invitation("grantee")
@@ -626,7 +649,7 @@
         success_msg = "Invitation sent successfully"
         self.assertIn(alert_elem.find_element_by_class_name("px-2").text, success_msg)
 
-        self.browser.find_element_by_link_text("New invitation").click()
+        self.browser.find_element_by_link_text("Make invitation").click()
 
         # select from list
         self.select_drop_down_for_invitation("grantee")
@@ -658,7 +681,7 @@
         self.assertIn(self.title, self.browser.title)
 
         self.browser.find_element_by_link_text("Invitations").click()
-        self.browser.find_element_by_link_text("New invitation").click()
+        self.browser.find_element_by_link_text("Make invitation").click()
 
         # invite grantee by email
         cannot_find_link = "Can't find the organization?"
@@ -703,7 +726,7 @@
         self.assertIn(self.title, self.browser.title)
 
         self.browser.find_element_by_link_text("Invitations").click()
-        self.browser.find_element_by_link_text("New invitation").click()
+        self.browser.find_element_by_link_text("Make invitation").click()
 
         # check if legal_name exists in grantee drop down
         select_grantee = Select(self.browser.find_element_by_tag_name("select"))
@@ -739,7 +762,7 @@
         self.assertIn(self.title, self.browser.title)
 
         self.browser.find_element_by_link_text("Invitations").click()
-        self.browser.find_element_by_link_text("New invitation").click()
+        self.browser.find_element_by_link_text("Make invitation").click()
 
         # select from list
         self.select_drop_down_for_invitation("grantee")
