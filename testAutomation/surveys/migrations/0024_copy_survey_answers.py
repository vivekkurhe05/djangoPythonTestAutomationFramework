# -*- coding: utf-8 -*-
# Generated by Django 1.11.7 on 2018-03-14 16:12
from __future__ import unicode_literals

from urllib.parse import unquote
from django.db import migrations


def get_code(question):
    return '{}.{}.{}.{}'.format(
        question.section.area.number,
        question.section.number,
        question.level,
        question.question_number,
    )


def get_name(question):
    return '\r\n'.join(unquote(question.name).splitlines())


def get_key(question):
    return '{} {}'.format(get_code(question), get_name(question))


def set_answers(apps, schema_editor):
    Survey = apps.get_model('surveys', 'Survey')
    SurveyQuestion = apps.get_model('surveys', 'SurveyQuestion')
    SurveyResponse = apps.get_model('surveys', 'SurveyResponse')
    SurveyAnswer = apps.get_model('surveys', 'SurveyAnswer')

    answer = []
    for survey in Survey.objects.all():

        questions = SurveyQuestion.objects.filter(survey=survey)
        key_lookup = {get_key(question) : question for question in questions}
        code_lookup = {get_code(question): question for question in questions}
        name_lookup = {get_name(question): question for question in questions}

        for response in SurveyResponse.objects.filter(survey=survey):
            files = {}
            answers = {}
            for key, value in response.answers.items():
                is_file = key.endswith('_file')
                if is_file:
                    key = key[:-5]

                try:
                    question = key_lookup[key]
                except KeyError:
                    # The keys in response.answers are of the format:
                    #  [areas].[section].[level].[question] Question text
                    code, name = key.split(' ', 1)
                    try:
                        question = name_lookup[name]
                    except KeyError:
                        try:
                            question = code_lookup[code]
                        except KeyError:
                            print('Unable to find question for answer {}: {}'.format(
                                code,
                                name,
                            ))
                            continue

                code = get_code(question)

                if is_file:
                    files[code] = value
                else:
                    answers[code] = value

            for code, value in answers.items():
                try:
                    path = files[code]
                except KeyError:
                    path = None

                question = code_lookup[code]
                answer.append(SurveyAnswer(
                    response=response,
                    question=question,
                    value='yes' if value else 'no',
                    document=path,
                ))


    SurveyAnswer.objects.bulk_create(answer)


class Migration(migrations.Migration):

    dependencies = [
        ('surveys', '0023_add_survey_answer'),
    ]

    operations = [
        migrations.RunPython(set_answers, migrations.RunPython.noop),
    ]
